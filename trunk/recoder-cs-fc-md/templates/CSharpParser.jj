options {
    JAVA_UNICODE_ESCAPE = true; // costs approx. 7%
    STATIC = true; // if true, the parser may be initialized only once
    //DEBUG_PARSER = true;
    //DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(CSharpParser)

package recoder.parser;

import java.io.*;
import java.util.*;

import recoder.*;
import recoder.list.*;
import recoder.csharp.*;
import recoder.csharp.attributes.*;
import recoder.csharp.attributes.targets.*;
import recoder.csharp.declaration.*;
import recoder.csharp.declaration.modifier.*;
import recoder.csharp.expression.*;
import recoder.csharp.expression.literal.*;
import recoder.csharp.expression.operator.*;
import recoder.csharp.reference.*;
import recoder.csharp.statement.*;
import recoder.io.*;


/**
   JavaCC AST generation specification based on the original Java1.1   
   grammar that comes with javacc, and includes the modification of D. Williams
   to accept the Java 1.2 strictfp modifier.
   Several patches have been added to allow semicola after member declarations.
   @author RN
   @author AL
 */
public class CSharpParser {

    public final static void initialize(Reader r) {
	current = null;
	comments.clear();
	ReInit(r);
    }

    /** the JavaProgramFactory instance that is used to create
	parse results
    */
    private static CSharpProgramFactory factory 
	= CSharpProgramFactory.getInstance();
    
    /** temporary valid variable that is used to return an additional
        argument from parser method VariableDeclaratorId, since such an
        id may have a dimension
    */
//    private static int tmpDimension;

    /** current token, follows the next links when necessary */
    private static Token current;

    /** all comments in a global list. */
    private static CommentMutableList comments = new CommentArrayList();


    /** reuseable position object. */
    private static SourceElement.Position position = new SourceElement.Position(0, 0);

    private static void	copyPrefixInfo(SourceElement oldResult,
				       SourceElement newResult) {
	newResult.setRelativePosition(oldResult.getRelativePosition());
	newResult.setStartPosition(oldResult.getStartPosition());
	newResult.setEndPosition(oldResult.getEndPosition());
    }

    private static void shiftToken() {
        if (current != token) {
	    if (current != null) {
		while (current.next != token) {
		    current = current.next;
		}
	    }
            Token prev;
            if (token.specialToken != null) {
                prev = token.specialToken;
            } else {
                prev = current;
            }
	    if (prev != null) {
		int col = token.beginColumn - 1;
		int lf = token.beginLine - prev.endLine;
		if (lf <= 0) {
                    col -= prev.endColumn; // - 1;
		    if (col < 0) {
			col = 0;
		    }
		}		
		position.setPosition(lf, col);
	    }
	    current = token;
        }
    }

    /**
       Sets indentation information.
     */
    private static void setPrefixInfo(SourceElement constrResult) {
	position.setPosition(0, 0);
	shiftToken();
	constrResult.setRelativePosition(position);
	position.setPosition(current.beginLine, current.beginColumn);
	constrResult.setStartPosition(position);
    }

    private static void setPostfixInfo(SourceElement constrResult) {
	shiftToken();
	position.setPosition(current.endLine, current.endColumn);
	constrResult.setEndPosition(position);
    }

    private static void addComment(Comment c, Token tok) {
        Token prev = tok.specialToken;
        if (prev == null) {
            prev = token;
            // in case we are inside a lookahead we skip to the last known
            // non-special token
            while (prev.next != null) {
                prev = prev.next;
            }
        }
	position.setPosition(0, 0);

        int internalIndentation = 0;
        int internalLinefeeds = 0;
        if (prev.image != null) {
	    int col = tok.beginColumn - 1;
	    int lf = tok.beginLine - prev.endLine;
	    if (lf <= 0) {
                col -= prev.endColumn; // - 1;
	    }		
	    position.setPosition(lf, col);
        }
	c.setRelativePosition(position);
	position.setPosition(tok.beginLine, tok.beginColumn);
	c.setStartPosition(position);
        if (!(c instanceof XmlDocComment)) {
	    boolean hasEmptyLine = c.getRelativePosition().getLine() > 1;
	    c.setPrefixed(hasEmptyLine);
	    if (tok.specialToken != null && !hasEmptyLine) {
		c.setPrefixed(comments.getComment(comments.size() - 1).isPrefixed());
	    }	    
	}
        comments.add(c);
    }
    
    static void addSingleLineComment(Token tok) {
        addComment(factory.createSingleLineComment(tok.image.trim()), tok);
    }

    static void addMultiLineComment(Token tok) {
        addComment(factory.createComment(tok.image), tok);
    }

    static void addXmlDocComment(Token tok) {
        addComment(factory.createXmlDocComment(tok.image), tok);
    }
    
    public static CommentMutableList getComments() {
	return comments;
    }

    /** inner class that is only used to return results from
	primary suffix syntax rule
	@author RN
    */
    static class PrimarySuffixReturnValue {
	
	// the following constants represent the various sub rules

	/** indicates that the result is currently undefined */
	static final int UNDEFINED       = -1;
	/** production was <pre>"." "this"</pre> */
	static final int THIS            =  0;	
	/** production was <pre>"." AllocationExpression</pre> */
	static final int ALLOCATION_EXPR =  1;	
	/** production was <pre>"[" Expression "]"</pre> */
	static final int INDEX_EXPR      =  2;	
	/** production was <pre>"." <IDENTIFIER></pre> */
	static final int IDENTIFIER      =  3;	
	/** production was <pre>Arguments</pre> */
	static final int ARGUMENTS       =  4;	

	/** indicates the type of the result */
	int                   type = UNDEFINED;
	
	/** valid iff <tt>type</tt> is <tt>ALLOCATION_EXPR</tt> or 
	    <tt>INDEX_EXPR</tt> */
	Expression            expr = null;
	
	/** valid iff <tt>type</tt> is <tt>IDENTIFIER</tt> */
	Identifier            id   = null;
    
	/** valid iff <tt>type</tt> is <tt>ARGUMENTS</tt> */
	ExpressionMutableList args = null;
    }


    /** inner class that is only used to return results from
	primary prefix syntax rule
	@author RN
    */
    static class PrimaryPrefixReturnValue {
    
	// the following constants represent the various sub rules
    
	/** indicates that the result is currently undefined */
	static final int UNDEFINED        = -1;	
	/** production was <pre>Literal</pre> */
	static final int LITERAL          =  0;    
	/** production was <pre>"this"</pre> */
	static final int THIS             =  1;	
	/** production was <pre>"super" "." <IDENTIFIER></pre> */
	static final int SUPER_MEMBER     =  2;	
	/** production was <pre>"(" Expression ")"</pre> */
	static final int PARENTHESIZED_EXPR =  3;    
	/** production was <pre>AllocationExpression</pre> */
	static final int ALLOCATION_EXPR  =  4;    
	/** production was <pre>ResultType "." "class"</pre> */
	static final int CLASS_REF        =  5;	
	/** production was <pre>Name</pre> */
	static final int QUALIFIED_NAME   =  6;
	/** production was <pre>an access to the superclass (e.g. operator or array reference)</pre> */
	static final int SUPER_REFERENCE   =  7;
    
	/** indicates the type of the result */
	int           type    = UNDEFINED;
    
	/** valid iff <tt>type</tt> is <tt>LITERAL</tt> */
	Literal       literal = null;
    
	/** valid iff <tt>type</tt> is <tt>PARENTHESED_EXPR</tt>
	    or <tt>ALLOCATION_EXPR</tt> */
	Expression    expr    = null;
    
	/** valid iff <tt>type</tt> is <tt>CLASS_REF</tt> */
	TypeReference typeref = null;
	
	/** valid iff <tt>type</tt> is <tt>QUALIFIED_NAME</tt> or
	 <tt>SUPER_MEMBER</tt>*/
	UncollatedReferenceQualifier name  = null;
    }

    /** return value containers for primary expression.
	need only be allocated once per parser. */
    static PrimarySuffixReturnValue suffix = new PrimarySuffixReturnValue();
    static PrimaryPrefixReturnValue prefix = new PrimaryPrefixReturnValue();

    
}

PARSER_END(CSharpParser)

/* WHITE SPACE */

//
// ADDITION!
// in addition to the ususal stuff, we are skiiping over #region and
// pre-processor decalaratioins
//
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
|  < PPDECLA: "#" (~["\n"])* "\n">
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
| "///" : IN_CSHARP_DOCCOMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n">
  {
      CSharpParser.addSingleLineComment(matchedToken);
  } 
  : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" >
  {
      CSharpParser.addXmlDocComment(matchedToken);
  }: DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" >  {
      CSharpParser.addMultiLineComment(matchedToken);
  }: DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT,IN_CSHARP_DOCCOMMENT>
MORE :
{
  < ~[] >
}


<IN_CSHARP_DOCCOMMENT>
MORE :
{
  <"\n" | "\r"> : IN_CSHARP_DOCCOMMENT_ENDOFLINE_1
  |
  <"\r\n"> : IN_CSHARP_DOCCOMMENT_ENDOFLINE_2
}

<IN_CSHARP_DOCCOMMENT_ENDOFLINE_1,IN_CSHARP_DOCCOMMENT_ENDOFLINE_2>
MORE:
{
	"///" : IN_CSHARP_DOCCOMMENT	
	
}

<IN_CSHARP_DOCCOMMENT_ENDOFLINE_1>
MORE:
{
	<~["/"]>
	{
		input_stream.backup(2);	
	}: CSHARP_DOCCOMMENT_ENDOFLINE
  |
	<"/">
	{	
		input_stream.backup(2);	
	}: CSHARP_DOCCOMMENT_ENDOFLINE	
  |
 	<"//">
	{	
		input_stream.backup(3);	
	}
	
	: CSHARP_DOCCOMMENT_ENDOFLINE
}

<IN_CSHARP_DOCCOMMENT_ENDOFLINE_2>
MORE:
{
	<~["/"]>
	{
		input_stream.backup(3);	
	}: CSHARP_DOCCOMMENT_ENDOFLINE
  |
	<"/">
	{	
		input_stream.backup(3);	
	}: CSHARP_DOCCOMMENT_ENDOFLINE	
  |
 	<"//">
	{	
		input_stream.backup(4);	
	}
	
	: CSHARP_DOCCOMMENT_ENDOFLINE
}
<CSHARP_DOCCOMMENT_ENDOFLINE>
SPECIAL_TOKEN:
{
  <CSHARP_DOCCOMMENT: "\n" | "\r" | "\r\n">
	{
		CSharpParser.addXmlDocComment(matchedToken);		
	}: DEFAULT
}



/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < AS: "as" >
| < BASE: "base" >
| < BOOL: "bool" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CHECKED: "checked" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < DECIMAL: "decimal" >
| < _DEFAULT: "default" >
| < DELEGATE: "delegate" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EVENT: "event" >
| < EXPLICIT: "explicit" >
| < EXTERN: "extern" >
| < FALSE: "false" >
| < FINALLY: "finally" >
| < FIXED: "fixed" >
| < FLOAT: "float" >
| < FOR: "for" >
| < FOREACH: "foreach" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLICIT: "implicit" >
| < IN: "in" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < INTERNAL: "internal" >
| < IS: "is" >
| < LOCK: "lock" >
| < LONG: "long" >
| < NAMESPACE: "namespace" >
| < NEW: "new" >
| < NULL: "null" >
| < OBJECT: "object" >
| < OPERATOR: "operator" >
| < OUT: "out" >
| < OVERRIDE: "override" >
| < PARAMS: "params">
| < PARTIAL: "partial" >
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < READONLY: "readonly" >
| < REF: "ref" >
| < RETURN: "return" >
| < SBYTE: "sbyte" >
| < SEALED: "sealed" >
| < SHORT: "short" >
| < SIZEOF: "sizeof" >
| < STACKALLOC: "stackalloc" >
| < STATIC: "static" >
| < STRING: "string" >
| < STRUCT: "struct" >
| < SWITCH: "switch" >
| < THIS: "this" >
| < THROW: "throw" >
| < TRUE: "true" >
| < TRY: "try" >
| < TYPEOF: "typeof" >
| < UINT: "uint" >
| < ULONG: "ulong" >
| < UNCHECKED: "unchecked" >
| < UNSAFE: "unsafe" >
| < USHORT: "ushort" >
| < USING: "using" >
| < VIRTUAL: "virtual" >
| < VOID: "void" >
| < VOLATILE : "volatile" >
| < WHERE: "where" > 
| < WHILE: "while" >
| < YIELD: "yield" >
// These are not keywords, but used in the language.
| < GET: "get" >
| < SET: "set" >
| < ADD: "add" >
| < REMOVE: "remove" >
| < ASSEMBLY: "assembly" >
| < FIELD: "field" >
| < METHOD: "method" >
| < MODULE: "module" >
| < PARAM: "param" >
| < PROPERTY: "property" >
| < TYPE: "type" >

}

/* LITERALS */


TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> ((["U","u"](["L","l"])?) | (["L","l"](["u","U"])?))?
      | <HEX_LITERAL> ((["U","u"](["L","l"])?) | (["L","l"](["u","U"])?))?
  >
|
  < #DECIMAL_LITERAL: ["0"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D","M","m"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D","M","m"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D","M","m"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D","M","m"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
	   ( ["n","t","b","r","f","\\","'","\""] 
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

MORE:
{
  <"@\""> : IN_VERBATIM_STRING_LITERAL
}



<IN_VERBATIM_STRING_LITERAL>
MORE:
{
	<"\n">
	|
	<"\r">
	|
	<"\r\n">
	|
	< "\"\"">
	|
	< ~["\r","\n","\""]>
}

<IN_VERBATIM_STRING_LITERAL>
TOKEN:
{
	<VERBATIM_STRING_LITERAL: "\"" > : DEFAULT
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER:  ( ("@" <LETTER>) | <LETTER> ) (<LETTER>|<DIGIT>)*  >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < ARROW: "->" >
}
/* TODO: FIND BETTER NAME FOR ARROW */

/*****************************************
 * THE C# LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/


/*****************************************************************/
/************************ IDENTIFIERS ****************************/
// This rule for the identifiers has been introduced to allow the
// usage of non-keywords (get/add/etc) as identifiers. ( These words
// had to be defined as tokens in order to get the compiler work 
// correctly ).

void CSIdentifier() :
{}
{
  <IDENTIFIER> | <GET> | <SET> | <ADD> | <REMOVE> | < ASSEMBLY>
| < FIELD>
| < METHOD >
| < MODULE >
| < PARAM >
| < PROPERTY >
| < TYPE >

}
// Thank this IQ 0 rule to those clever people at MS, who know what is good for you...


 
/****************** Types declaration **************************/

TypeReference Type() :
{
  TypeReference result;
  int[] dimensions = null;
}
{

  result = NonArrayType()

  dimensions = RankSpecifiers(null)
 
  {
      result.setDimensions(dimensions);
      setPostfixInfo(result);
      return result;
  }
  
}

TypeReference NonArrayType() :
{
  TypeReference result;
  UncollatedReferenceQualifier qn;
}
{
  ( result = PrimitiveType()
  |  result = ReferenceType()
  | (qn = Name() 
    {
	result = qn.toTypeReference();
    }
    )

  )
  {
      return result;
  }
}



TypeReference IntegralType():
{
    TypeReference result;
}
{
  //
  // ADDITION!
  // nullable primitive types
  //
  (
    "bool?"
  | "bool"  
  | "char"
  | "char?"
  | "sbyte"
  | "sbyte?"
  | "byte"
  | "byte?"
  | "short"
  | "short?"
  | "ushort"
  | "ushort?"
  | "int"
  | "int?"
  | "uint"
  | "uint?"
  | "long"
  | "long?"
  | "ulong"
  | "ulong?"
  )
  {
	String myToken = token.image;
	myToken = myToken.replace("?","");
    Identifier id = factory.createIdentifier(myToken);
    setPrefixInfo(id);
    setPostfixInfo(id);
    result = factory.createTypeReference(id);
    setPostfixInfo(result);
    setPrefixInfo(result);
    return result;
  }
}




TypeReference PrimitiveType() :
{
    TypeReference result;}
{
  
  result = IntegralType() {
     return result;
  }
  |
  //
  // ADDITION!
  // nullable primitive types
  //
  (
    "float"
  | "float?"    
  | "double"
  | "double?"
  | "decimal"
  | "decimal?"
  )
  {
    Identifier id = factory.createIdentifier(token.image);
    setPrefixInfo(id);
    setPostfixInfo(id);
    result = factory.createTypeReference(id);
    setPostfixInfo(result);
    setPrefixInfo(result);
    return result;
  }
}

TypeReference ReferenceType() :
{
    TypeReference result;}
{
  (
    "object"
  | "string"
  )
  {
    Identifier id = factory.createIdentifier(token.image);
    setPrefixInfo(id);
    setPostfixInfo(id);
    result = factory.createTypeReference(id);
    setPostfixInfo(result);
    setPrefixInfo(result);
    return result;
  }
}


TypeReference ResultType() :
{
  TypeReference result;
}
{
(
  ( "void" { 
    Identifier id = factory.createIdentifier(token.image);
    setPrefixInfo(id);
    setPostfixInfo(id);
    result = factory.createTypeReference(id);
    setPrefixInfo(result);    
} )
  | result = Type()
)
  {
    setPostfixInfo(result);
    return result;
  }
}

/******************** Variable declarators ***********/

VariableSpecification ConstantDeclarator(boolean isForField) :
{
	VariableSpecification result;
	Expression init;
	Identifier id;
}
{
    id = VariableDeclaratorId() 
	{
    	if (isForField) {
			result = factory.createConstantFieldSpecification(id);
	    } else {
			result = factory.createConstantSpecification(id);
	    }
		setPrefixInfo(result);
	}
    "=" 
    init = VariableInitializer()
    {
      result.setInitializer(init);
      setPostfixInfo(result);
      return result;
    }
       
}


VariableSpecification VariableDeclarator(boolean isForField) :
{
    Identifier id;
    Expression init = null;
    VariableSpecification result;
}
{
    id = VariableDeclaratorId() {
    if (isForField) {
		result = factory.createFieldSpecification(id);
    } else {
		result = factory.createVariableSpecification(id);
    }
    setPrefixInfo(result); // kis: ??? only after "=" !!!!!!!!!!!!!!!
    	
    }
    [ "=" init = VariableInitializer() 
    	{
    	    result.setInitializer(init);
    	}
    
    ]
    {
    	setPostfixInfo(result);
    	return result;
  	}
}


Identifier VariableDeclaratorId() :
{
    Identifier result;
}
{
  CSIdentifier()
  { 
      result = factory.createIdentifier(token.image);
      setPrefixInfo(result);
      setPostfixInfo(result);
  }
  
  {
    return result;
  }
}

Expression VariableInitializer() :
{
  Expression result;
}
{
(
    result = ArrayInitializer()
  | result = Expression()
)
  {
    return result;
  }
}


ArrayInitializer ArrayInitializer() :
{
    ArrayInitializer result;
    ExpressionMutableList el = new ExpressionArrayList();
    Expression init;
}
{
    "{" {
	result = factory.createArrayInitializer();
	setPrefixInfo(result);
    }
  [ init = VariableInitializer()
    { el.add(init); }
    ( LOOKAHEAD(2) ","
      init = VariableInitializer()
    { el.add(init); }
    )*
  ] [ "," ] "}"
  {
    result.setArguments(el);
    setPostfixInfo(result);
    return result;
  }
}


/******************** Name declarations **************/


UncollatedReferenceQualifier Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{
  UncollatedReferenceQualifier result;
  Identifier id;
}
{
  CSIdentifier()
  {
    id = factory.createIdentifier(token.image);    
    setPrefixInfo(id);
    setPostfixInfo(id);
    result = factory.createUncollatedReferenceQualifier(id);
    setPrefixInfo(result);
    setPostfixInfo(result);
  }
  ( LOOKAHEAD(2) "." 
  /*  Commented, because this sets the prefixinfo 
  to the position of the dot 
  { setPrefixInfo(result); setPostfixInfo(result); } 
  */ CSIdentifier()
    {
      id = factory.createIdentifier(token.image);
      setPrefixInfo(id);
      setPostfixInfo(id);
      result = factory.createUncollatedReferenceQualifier(result, id);
      setPrefixInfo(result);
      setPostfixInfo(result);
    }
  )*
  //
  // ADDITION!
	// a name can be followed by typeargumentlIst
  //
  (LOOKAHEAD(3) TypeArgumentList())?
  {
    return result;
  }
}

UncollatedReferenceQualifierMutableList NameList() :
{
  UncollatedReferenceQualifierMutableList result = 
      new UncollatedReferenceQualifierArrayList();
  UncollatedReferenceQualifier qn;
}
{
  qn = Name()
  {
    result.add(qn);
  }
  ( "," qn = Name()
    {
      result.add(qn);
    }
  )*
  {
    return result;
  }
}




/**************** Classes and other types ******************/



CompilationUnit CompilationUnit() :
{
    CompilationUnit result;
    UsingMutableList                  ul  = new UsingArrayList();
    Using                             using;
    NamespaceSpecificationMutableList nsl = new NamespaceSpecificationArrayList();
    NamespaceSpecification            ns;
    TypeDeclarationMutableList        tdl = new TypeDeclarationArrayList();
    TypeDeclaration                   td;
    AttributeSectionMutableList       asl = new AttributeSectionArrayList();
    AttributeSection				  as;
	AttributeSectionMutableList       lasl = new AttributeSectionArrayList();

}
{
  (
    ( LOOKAHEAD("using" Name() "=" )
      using = UsingAliasDeclaration()
     |
      using = UsingDeclaration() 
    )
    {
      if (using != null) ul.add(using);
    }
  )*
  ( LOOKAHEAD("[" "assembly" )
  	as = GlobalAttributeSection()
    {
      if (as != null) asl.add(as);
    }
  )*
 
  (
    (
    	as = AttributeSection() 
    	{
    		if (as != null) {
    			lasl.add(as);
    		}
    	}
    )*
    (
    ( 
     ns = NamespaceDeclaration()
     {
       ns.setAttributeSections(lasl);
       lasl = new AttributeSectionArrayList();
       if (ns != null) nsl.add(ns);
     }
    )
    |
    ( 
       td = TypeDeclaration()
       {
       	 td.setAttributeSections(lasl);
       	 lasl = new AttributeSectionArrayList();	
         if (td != null) tdl.add(td);
       }
    
    )
    )  
  )*
  <EOF>
  {
    result = factory.createCompilationUnit(nsl, ul, tdl); 
    result.setAttributeSections(asl);
    setPostfixInfo(result);
    setPrefixInfo(result);
    return result;
  }
}

Using UsingDeclaration() :
{
    Using result;
    UncollatedReferenceQualifier qn;
    String hs = null;
    boolean wildcard = false;
}
{
  "using" {
      result = factory.createUsing();
      setPrefixInfo(result);
  }
  ( qn = Name()  ";"
  	{
	  	result.setReference(qn.toNamespaceReference());
      	setPostfixInfo(result);
      	return result;
  	}
  )
}

UsingAlias UsingAliasDeclaration() :
{
    UsingAlias result;
    UncollatedReferenceQualifier qn;
    String hs = null;
    boolean wildcard = false;
}
{
  "using" {
      result = factory.createUsingAlias();
      setPrefixInfo(result);
  }
  CSIdentifier()
      {
	  Identifier id = factory.createIdentifier(token.image);
	  setPrefixInfo(id);
	  setPostfixInfo(id);
	  result.setIdentifier(id);
      }
  "="  
  ( qn = Name()  ";"
  	{
	  	result.setReference(qn);
      	setPostfixInfo(result);
      	return result;
  	}
  )
}


NamespaceSpecification NamespaceDeclaration():
{
    NamespaceSpecification result;
    UsingMutableList                  ul  = new UsingArrayList();
    Using                             using;
    NamespaceSpecificationMutableList nsl = new NamespaceSpecificationArrayList();
    NamespaceSpecification            ns;    
    UncollatedReferenceQualifier 	  qn;
    TypeDeclarationMutableList	      tdl = new TypeDeclarationArrayList();
    TypeDeclaration                   td;
    AttributeSectionMutableList       asl = new AttributeSectionArrayList();
    AttributeSection				  as;
}
{
  "namespace" { 
  		result = factory.createNamespaceSpecification();
  		setPrefixInfo(result);
  		}
  qn = Name()  
  "{"
	
  (
     using = UsingDeclaration()
    {
      if (using != null) ul.add(using);
    }
  )*
  
  ( 

    (
    	as = AttributeSection() 
    	{
    		if (as != null) {
    			asl.add(as);
    		}
    	}
    )*


    (
       ns = NamespaceDeclaration()
       {
         ns.setAttributeSections(asl);
         asl = new AttributeSectionArrayList();
         if (ns != null) nsl.add(ns);
       }
    
    |   
     
       td = TypeDeclaration()
       {
         td.setAttributeSections(asl);
         asl = new AttributeSectionArrayList();
         if (td != null) tdl.add(td);
       }
    
    )
     
  )*
  "}"
  [ ";" ]
  {
	result.setNamespaceReference(qn.toNamespaceReference());
	result.setNamespaces(nsl);
	result.setDeclarations(tdl);
	result.setUsings(ul);
	setPostfixInfo(result);  
	return result;
  }
}


TypeDeclaration TypeDeclaration() :
{
    TypeDeclaration result = null;
}
{
  (
  //
  // ADDITION!
  // lookahead for partial,c classes, structs
  // included ststic in class lookahead
  //
	LOOKAHEAD( ( "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static")* ("partial")? "class" ) 
    result = ClassDeclaration()
  | LOOKAHEAD( ( "new" | "public" | "protected" | "internal" | "private" )* ("partial")? "interface" ) 
    result = InterfaceDeclaration()
  | LOOKAHEAD( ( "new" | "public" | "protected" | "internal" | "private" )* ("partial")? "struct" ) 
    result = StructDeclaration()
  | LOOKAHEAD( ( "new" | "public" | "protected" | "internal" | "private" )* "enum" ) 
    result = EnumDeclaration()
  | LOOKAHEAD( ( "new" | "public" | "protected" | "internal" | "private" )* "delegate" ) 
    result = DelegateDeclaration()
  )
  [";"]
  
  {
    if (result != null) {
	setPostfixInfo(result);
    }
    return result;
  }
}


ClassDeclaration ClassDeclaration() :
{
  ClassDeclaration    result = null;
  ModifierMutableList ml = new ModifierArrayList();
  Modifier            m;
}
{
  ( (
      ( "new" { m = factory.createAbstract(); } )
    |  ( "public"   { m = factory.createPublic();   } )
    |  ( "protected" { m = factory.createProtected(); } )
    |  ( "internal" { m = factory.createInternal(); } )
    |  ( "private" { m = factory.createPrivate(); } )
    |  ( "abstract" { m = factory.createAbstract(); } )
    |  ( "sealed" { m = factory.createSealed(); } )
  //
  // ADDITION!
  // classes can be static
  //
    |	 ( "static"{ m =  factory.createStatic(); })
    )
    { 
	setPrefixInfo(m);
	setPostfixInfo(m);
	ml.add(m); 
    }
  )*

  //
  // ADDITION!
  // read over partial classes
  //
	("partial")*
  
  result = UnmodifiedClassDeclaration()
  {
    result.setModifiers(ml);
    setPostfixInfo(result);
    return result;
  }
}

ClassDeclaration UnmodifiedClassDeclaration() :
{
  ClassDeclaration                 result;
  UncollatedReferenceQualifier     qn;
  UncollatedReferenceQualifierList nl;
  MemberDeclarationMutableList     mdl;
  Extends ex;
  
}
{
  "class"  {
      result = factory.createClassDeclaration();
      setPrefixInfo(result);
  }
  CSIdentifier()
      {
	  Identifier id = factory.createIdentifier(token.image);
	  setPrefixInfo(id);
	  setPostfixInfo(id);
	  result.setIdentifier(id);
      }
  //
  // ADDITION!
  // generic types for classes
  //
  (TypeParameterList())?
  [ ":"
      {
	  ex = factory.createExtends();
	  setPrefixInfo(ex);	  
      }
      nl = NameList()
      {
	  TypeReferenceMutableList trl = new TypeReferenceArrayList();
	  for (int i = 0, s = nl.size(); i < s; i++) {
	      TypeReference tr = 
		  nl.getUncollatedReferenceQualifier(i).toTypeReference();
	      trl.add(tr);
	  }
	  ex.setSupertypes(trl);
	  setPostfixInfo(ex);
	  result.setExtendedTypes(ex);
      }
  ]
	//
	// ADDITION!
	// type parameter constraints in class decleration
	//
  (TypeParameterConstraintsClauses())?
  mdl = ClassBody() 
  {
    result.setMembers(mdl);
    setPostfixInfo(result); // coordinate of "}" ?!
    return result;
  }
  
}

////////////////////////////// Struct declaration ///////////////////////

StructDeclaration StructDeclaration() :
{
  StructDeclaration    result = null;
  ModifierMutableList ml = new ModifierArrayList();
  Modifier            m;
}
{
  ( (
      ( "new" { m = factory.createAbstract(); } )
    |  ( "public"   { m = factory.createPublic();   } )
    |  ( "protected" { m = factory.createProtected(); } )
    |  ( "internal" { m = factory.createInternal(); } )
    |  ( "private" { m = factory.createPrivate(); } )
    )
    { 
	setPrefixInfo(m);
	setPostfixInfo(m);
	ml.add(m); 
    }
  )*

  //
  // ADDITION!
  // read over partial structs
  //
	("partial")*
	
  result = UnmodifiedStructDeclaration()
  {
    result.setModifiers(ml);
    setPostfixInfo(result);
    return result;
  }
}

StructDeclaration UnmodifiedStructDeclaration() :
{
  StructDeclaration                 result;
  UncollatedReferenceQualifier     qn;
  UncollatedReferenceQualifierList nl;
  MemberDeclarationMutableList     mdl;
  Extends ex;
  
}
{
  "struct"  {
      result = factory.createStructDeclaration();
      setPrefixInfo(result);
  }
  CSIdentifier()
      {
	  Identifier id = factory.createIdentifier(token.image);
	  setPrefixInfo(id);
	  setPostfixInfo(id);
	  result.setIdentifier(id);
      }
  //
  // ADDITION!
  // generic types for structs
  //
  (TypeParameterList())?
  ("?")?
  [ ":"
      {
	  ex = factory.createExtends();
	  setPrefixInfo(ex);	  
      }
      nl = NameList()
      {
	  TypeReferenceMutableList trl = new TypeReferenceArrayList();
	  for (int i = 0, s = nl.size(); i < s; i++) {
	      TypeReference tr = 
		  nl.getUncollatedReferenceQualifier(i).toTypeReference();
	      trl.add(tr);
	  }
	  ex.setSupertypes(trl);
	  result.setExtendedTypes(ex);
      }
  ]
// There are no destructor declarations in structs, but we simplify the grammar.  
  mdl = ClassBody() 
  {
    result.setMembers(mdl);
    setPostfixInfo(result); // coordinate of "}" ?!
    return result;
  }
  
}



////////////////////////////// Interface declaration ///////////////////

InterfaceDeclaration InterfaceDeclaration() :
{
  InterfaceDeclaration result;
  ModifierMutableList ml = new ModifierArrayList();
  Modifier m;
}
{
  (
    (
      ( "new"  { m = factory.createNewModifier(); }  )
    | ( "public"    { m = factory.createPublic(); }    )
    | ( "protected"  { m = factory.createProtected(); }  )
    | ( "internal"    { m = factory.createInternal(); }    )
    | ( "private"    { m = factory.createPrivate(); }    )
    )
    {
	setPrefixInfo(m);
	setPostfixInfo(m);
	ml.add(m);
    }
  )*
  //
  // ADDITION!
  // read over partial interfaces
  //
	("partial")*
  
  result = UnmodifiedInterfaceDeclaration()
  {
    result.setModifiers(ml);
    setPostfixInfo(result);
    return result;
  }

}

InterfaceDeclaration UnmodifiedInterfaceDeclaration() :
{
    InterfaceDeclaration             result;
    UncollatedReferenceQualifierList nl;
    MemberDeclarationMutableList     mdl = new MemberDeclarationArrayList();
    MemberDeclaration                md;
    Extends ex;
}
{
  "interface"
  {
      result = factory.createInterfaceDeclaration();
      setPrefixInfo(result);
  }      
  CSIdentifier()
  {
      Identifier id = factory.createIdentifier(token.image);
      setPrefixInfo(id);
      setPostfixInfo(id);
      result.setIdentifier(id);
  }
  //
  // ADDITION!
  // generic types for methods
  //
  (TypeParameterList())?
  [ ":"
      {
	  ex = factory.createExtends();
	  setPrefixInfo(ex);
      }
      nl = NameList()
      {
	  TypeReferenceMutableList trl = new TypeReferenceArrayList();
	  for (int i = 0, s = nl.size(); i < s; i++) {
	      TypeReference tr = 
		  nl.getUncollatedReferenceQualifier(i).toTypeReference();
	      trl.add(tr);
	  }
	  ex.setSupertypes(trl);
	  result.setExtendedTypes(ex);
      }
  ]
  "{"
  (
    md = InterfaceMemberDeclaration()
    {
	mdl.add(md);
    }
  )*
  "}"
  {
    result.setMembers(mdl);
    setPostfixInfo(result);
    return result;
  }
}

MemberDeclaration InterfaceMemberDeclaration() :
{
    MemberDeclaration result;
    AttributeSectionMutableList asl;
}
{


  asl = AttributeSections()

// TODO: Interfaces have a lot more restricted declarations as classes.
//       Here we have followed the old Recoder policy, saying: we don't
//       care, and we'll accept those declarations too. 
(

  LOOKAHEAD( MethodDeclarationLookahead() )
  (result = MethodDeclaration()) 

| LOOKAHEAD( EventDeclarationLookahead() )
  (result = EventDeclaration()) 

| LOOKAHEAD( IndexerDeclarationLookahead() )
  (result = IndexerDeclaration() )

| LOOKAHEAD( PropertyDeclarationLookahead() )
  (result = PropertyDeclaration() )

)
  {
  	result.setAttributeSections(asl);
    setPostfixInfo(result);
    return result;
  }
}

////////////////////////////// Enum declaration ///////////////////

EnumDeclaration EnumDeclaration() :
{
  EnumDeclaration result;
  ModifierMutableList ml = new ModifierArrayList();
  Modifier m;
}
{
  (
    (
      ( "new"  { m = factory.createNewModifier(); }  )
    | ( "public"    { m = factory.createPublic(); }    )
    | ( "protected"  { m = factory.createProtected(); }  )
    | ( "internal"    { m = factory.createInternal(); }    )
    | ( "private"    { m = factory.createPrivate(); }    )
    )
    {
	setPrefixInfo(m);
	setPostfixInfo(m);
	ml.add(m);
    }
  )*
  result = UnmodifiedEnumDeclaration()
  {
    result.setModifiers(ml);
//    setPostfixInfo(result);
    return result;
  }

}

EnumDeclaration UnmodifiedEnumDeclaration() :
{
    EnumDeclaration             result;
    TypeReference                    basetype;
    MemberDeclarationMutableList     mdl = new MemberDeclarationArrayList();
    MemberDeclaration                md;
}
{
  "enum"
  {
      result = factory.createEnumDeclaration();
      setPrefixInfo(result);
  }      
  CSIdentifier()
  {
      Identifier id = factory.createIdentifier(token.image);
      setPrefixInfo(id);
      setPostfixInfo(id);
      result.setIdentifier(id);
  }
  [ ":"
      basetype = IntegralType()
      {
      	result.setBaseTypeReference(basetype);
	  }
  ]
  "{"
	[
  (
    md = EnumMemberDeclaration()
    {
	mdl.add(md);
    }
  )
  (LOOKAHEAD(2)
  	","
    md = EnumMemberDeclaration()
    {
	mdl.add(md);
    }
  )*
  [","]
  ]
  "}"
  [ LOOKAHEAD(2) ";"]
  {
    result.setMembers(mdl);
//    setPostfixInfo(result);
    return result;
  }
}

EnumMemberDeclaration EnumMemberDeclaration() :
{
    EnumMemberDeclaration result;
    Expression init;
    Identifier id;
    AttributeSectionMutableList asl;
}
{
	asl = AttributeSections()
	
	CSIdentifier()
		{
			id = factory.createIdentifier(token.image);
			result = factory.createEnumMemberDeclaration(id);
			result.setAttributeSections(asl);
//			setPrefixInfo(result);
		}
	["=" init=Expression() { result.setExpression(init); } ]
  {	
  	setPostfixInfo(result);
    return result;
  }
}


////////////////////////// DELEGATES ///////////////////////////////

DelegateDeclaration DelegateDeclaration() :
{
  DelegateDeclaration             result;
  ModifierMutableList             ml       = new ModifierArrayList();
  Modifier                        m        = null;
  TypeReference                   tr;
  Identifier                      id;
  ParameterDeclarationMutableList pdl;
}
{
  (
    (

      ( "new"          { m = factory.createNewModifier(); }        )
    | ( "public"       { m = factory.createPublic(); }        )
    | ( "protected"    { m = factory.createProtected(); }     )
    | ( "internal"     { m = factory.createInternal(); }        )
    | ( "private"      { m = factory.createPrivate(); }       )
    )
    {
	setPrefixInfo(m);
	setPostfixInfo(m);
	ml.add(m);
    }
  )*
  
  "delegate"
  
  tr = ResultType()
  
  CSIdentifier()
  { 
      id = factory.createIdentifier(token.image); 
      setPrefixInfo(id); 
      setPostfixInfo(id); 
  }

  //
  // ADDITION!
  // generic types for methods
  //
  (TypeParameterList())?
  
  pdl = FormalParameters()
  
 
  ";"  
  
  {
      result = factory.createDelegateDeclaration();
      result.setIdentifier(id);
      result.setTypeReference(tr);
      result.setParameters(pdl);
      setPrefixInfo(result); 
      result.setModifiers(ml);
      setPostfixInfo(result);
      return result;
  }
}

///////////////////////// Class Body Elements //////////////////////

MemberDeclarationMutableList ClassBody():
{
  MemberDeclarationMutableList mdl = new MemberDeclarationArrayList();
  MemberDeclaration md;
}
{
  "{" 
  (
    md = ClassBodyDeclaration()
    {
	  mdl.add(md);
    }
  )*
 "}"
	{
		return mdl;
	}
}

MemberDeclaration ClassBodyDeclaration() :
{
  MemberDeclaration result;
  AttributeSectionMutableList asl = null;
}
{

// Attributes
  asl = AttributeSections()

// These are the members

(
  LOOKAHEAD( MethodDeclarationLookahead() )
  (result = MethodDeclaration()) 

| LOOKAHEAD( EventDeclarationLookahead() )
  (result = EventDeclaration()) 

| LOOKAHEAD( ( "public" | "protected" | "internal" | "private"| "extern" )* Name() "(" )
  (result = ConstructorDeclaration() ) 

| LOOKAHEAD( [ "extern" ] "static" [ "extern" ] Name() "(" )
  (result = StaticConstructorDeclaration() ) 

| LOOKAHEAD( [ "extern" ] "~"  )
  (result = DestructorDeclaration())

| LOOKAHEAD( IndexerDeclarationLookahead() )
  (result = IndexerDeclaration() )

| LOOKAHEAD( PropertyDeclarationLookahead() )
  (result = PropertyDeclaration() )

| LOOKAHEAD ( FieldDeclarationLookahead() )
  (result = FieldDeclaration()) 

| LOOKAHEAD ( ConstantDeclarationLookahead() )
  (result = ConstantDeclaration())

| LOOKAHEAD( ( "public" | "static" | "extern" )* Type() "operator" )
  (result = OperatorOverloadDeclaration() )

| LOOKAHEAD( ( "public" | "static" | "extern" )* ( "explicit" | "implicit" ) "operator" )
  (result = CastOperatorOverloadDeclaration() )
  
| ( result = TypeDeclaration())
  
)  
  {
    result.setAttributeSections(asl);
    setPostfixInfo(result);
    return result;
  }
}

/////////////////////// CONSTRUCTORS ////////////////////////////////

ConstructorDeclaration ConstructorDeclaration() :
{
    ConstructorDeclaration          result;
	ModifierMutableList ml = new ModifierArrayList();
    Modifier                        m = null;
    Identifier                      id;
    ParameterDeclarationMutableList pdl;
    UncollatedReferenceQualifierMutableList nl = null;
    SpecialConstructorReference     scr = null;
    StatementBlock                  body = null;
    StatementMutableList            stats = new StatementArrayList();
    Statement                       stat;
}
{
  {
     result = factory.createConstructorDeclaration();
     setPrefixInfo(result); 
  }
  (
   (
      ( "public"       { m = factory.createPublic(); }    )
    | ( "protected"    { m = factory.createProtected(); } )
    | ( "internal"    { m = factory.createInternal(); } )
    | ( "private"      { m = factory.createPrivate(); }   )
    | ( "extern"    { m = factory.createExtern(); } )
   )
      {
	  setPrefixInfo(m); 
	  setPostfixInfo(m);
	  if (ml != null)
	  	ml.add(m);
      }
  )*
  CSIdentifier() { 
      id = factory.createIdentifier(token.image);
      setPrefixInfo(id); 
      setPostfixInfo(id);
  }
  pdl = FormalParameters()

  [ ":" scr = ExplicitConstructorInvocation() ]
  
  ( body = Block() | ";" )
  
  {
      result.setIdentifier(id);
      result.setParameters(pdl);
  	  result.setModifiers(ml);
      result.setBody(body);
	  result.setSpecialConstructorReference(scr);
      setPostfixInfo(result);
      return result;
  }
}

SpecialConstructorReference ExplicitConstructorInvocation() :
{
    SpecialConstructorReference result;
    ExpressionMutableList args;
    Expression expr = null;
}
{
(
  LOOKAHEAD("this" Arguments() )
  "this" 
  {
     result = factory.createThisConstructorReference(); setPrefixInfo(result);
  } 
  args = Arguments() 
  { result.setArguments(args); }
|
  "base" 
  {
     result = factory.createSuperConstructorReference(); setPrefixInfo(result);
  } 
  args = Arguments() 
  { 
    result.setArguments(args);
// TODO: Delete ReferencePrefix method from SuperConstructorReference???
   }
)
  {
      setPostfixInfo(result);
      return result;
  }
}

// STATIC CONSTRUCTOR (INITIALIZER)

StaticConstructorDeclaration StaticConstructorDeclaration() :
{
  StaticConstructorDeclaration result;   
  ModifierMutableList ml =  new ModifierArrayList();
  StatementBlock block = null;
  Identifier id;
  Modifier s;
}
{
  [ "extern"
    {
      s = factory.createExtern();
      setPrefixInfo(s); 
      setPostfixInfo(s);
      ml.add(s);
    }
  ]
  
  "static" 
  {
      s = factory.createStatic();
      setPrefixInfo(s); 
      setPostfixInfo(s);
      ml.add(s);
  }
  
  [ "extern"
    {
      s = factory.createExtern();
      setPrefixInfo(s); 
      setPostfixInfo(s);
      ml.add(s);
    }
  ]
  
  CSIdentifier() { 
      id = factory.createIdentifier(token.image);
      setPrefixInfo(id); 
      setPostfixInfo(id);
  }
  
  "(" ")"
  
  (  block = Block() | ";" )
  
  {
    result = factory.createStaticConstructorDeclaration();
    setPrefixInfo(result);
    result.setBody(block);
    result.setIdentifier(id);        
    result.setModifiers(ml);
    setPostfixInfo(result);
    return result;
  }
}

// STATIC CONSTRUCTOR (INITIALIZER)

DestructorDeclaration DestructorDeclaration() :
{
  DestructorDeclaration result;   
  ModifierMutableList ml =  new ModifierArrayList();
  StatementBlock block = null;
  Identifier id;
  Modifier s;
}
{
  [ "extern"
    {
      s = factory.createExtern();
      setPrefixInfo(s); 
      setPostfixInfo(s);
      ml.add(s);
    }
  ]
  
  "~" CSIdentifier() { 
      id = factory.createIdentifier(token.image);
      setPrefixInfo(id); 
      setPostfixInfo(id);
  }
  
  "(" ")"
  
  (  block = Block() | ";" )
  
  {
    result = factory.createDestructorDeclaration();
    setPrefixInfo(result);
    result.setBody(block);
    result.setIdentifier(id);        
    result.setModifiers(ml);
    setPostfixInfo(result);
    return result;
  }
}

////////////////////////////// CONSTANTS ///////////////////////////////

void ConstantDeclarationLookahead() :
{}
{
  (( "new" | "public" | "protected" | "internal" | "private" )* "const" )
}


ConstantFieldDeclaration ConstantDeclaration() :
{
    ConstantFieldDeclaration result;
    ModifierMutableList ml = new ModifierArrayList();
    Modifier m = null;
    TypeReference tr;
    FieldSpecificationMutableList vl = new FieldSpecificationArrayList();
    VariableSpecification var;
}
{
   (
    (
      ( "new"       { m = factory.createNewModifier(); }    )
    | ( "public"    { m = factory.createPublic(); }    )
    | ( "protected" { m = factory.createProtected(); } )
    | ( "internal"  { m = factory.createInternal(); } )
    | ( "private"   { m = factory.createPrivate(); }   )
    )
    {	
	setPrefixInfo(m);	
	setPostfixInfo(m);
	ml.add(m);
    }
  )*
  
  "const" {
    result = factory.createConstantFieldDeclaration();
    result.setModifiers(ml);
    setPrefixInfo(result);
  }
    
  tr = Type()
  {
    result.setTypeReference(tr);
  }
  
  var = ConstantDeclarator(true)
      {
	  vl.add((ConstantFieldSpecification)var);
      }
  (
    ","
    var = ConstantDeclarator(true)
    {
	  vl.add((ConstantFieldSpecification)var);
    }
  )*
  ";"
  {
    result.setFieldSpecifications(vl);
    setPostfixInfo(result);
    return result;
  }
}


////////////////////////////// METHOD /////////////////////////////

void MethodDeclarationLookahead() :
{}
{
  ( "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" 
  | "override" | "abstract" | "extern" )*
  ResultType() Name() "("
}

MethodDeclaration MethodDeclaration() :
{
  ModifierMutableList ml = new ModifierArrayList();
  Modifier m = null;
  TypeReference tr;
  StatementBlock body = null;
  MethodDeclaration result;
}
{
  (
    (

      ( "new"          { m = factory.createNewModifier(); }        )
    | ( "public"       { m = factory.createPublic(); }        )
    | ( "protected"    { m = factory.createProtected(); }     )
    | ( "internal"     { m = factory.createInternal(); }        )
    | ( "private"      { m = factory.createPrivate(); }       )
    | ( "static"       { m = factory.createStatic(); }        )
    | ( "virtual"      { m = factory.createVirtual(); }         )
    | ( "sealed"       { m = factory.createSealed(); }         )
    | ( "abstract"     { m = factory.createAbstract(); }      )
    | ( "override"     { m = factory.createOverride(); }        )
    | ( "extern"       { m = factory.createExtern(); }  )
    )
    {
	setPrefixInfo(m);
	setPostfixInfo(m);
	ml.add(m);
    }
  )*
  tr = ResultType() {
  }
  result = MethodDeclarator(tr)
  ( body = Block() | ";" )
  {
      result.setModifiers(ml);
      result.setBody(body);
      setPostfixInfo(result);
      return result;
  }
}

MethodDeclaration MethodDeclarator(TypeReference tr) :
{
    ParameterDeclarationMutableList pdl;
    MethodDeclaration               result;
	UncollatedReferenceQualifier    ifr;
	MemberName mname;
}
{

  ifr = Name()  

  //
  // ADDITION!
  // generic types for methods
  //
  (TypeParameterList())?
  
  pdl = FormalParameters()
  

  {
      result = factory.createMethodDeclaration();
      mname = ifr.toMemberName();
      result.setMemberName(mname);
      result.setTypeReference(tr);
      result.setParameters(pdl);
      setPrefixInfo(result); 
      setPostfixInfo(result);
      return result;
  }
}

ParameterDeclarationMutableList FormalParameters() :
{
    ParameterDeclaration pd;
    ParameterDeclarationMutableList result = new ParameterDeclarationArrayList();
    AttributeSectionMutableList asl = null;
}
{
  "("
   [
    
//      ( // First : formal parameter and other formal parameters
//              pd = FormalParameter() { result.add(pd); }
//        ( LOOKAHEAD(2) "," pd = FormalParameter() { result.add(pd); } )*
//        ( "," pd = ParameterArray() { result.add(pd); } )* 
//      )
//      
//      | 
//      
//      (
//        // First: parameter array
//      ( pd = ParameterArray() { result.add(pd); } )
//      ( "," pd = ParameterArray() { result.add(pd); } )* 
//
// This part has been commented out, because the MS guys wrote a fine
// left recursive grammar. So we gave up forcing the correct syntax,
// and added the following rule (which allows more, than the correct
// syntax, but works...)
	

	    (
	      asl = AttributeSections()
	    
	      (	    
	    	pd = FormalParameter() {
	    	   pd.setAttributeSections(asl);
	    	   result.add(pd);
	    	}
	    	
	    	|
	    	
	    	pd = ParameterArray() {
	    	   pd.setAttributeSections(asl);
	    	   result.add(pd);
	    	}
	    	
	      )
	      
	    )
	    
	    (
	      ","
	      
	      asl = AttributeSections()
	    
	      (	    
	    	pd = FormalParameter() {
	    	   pd.setAttributeSections(asl);
	    	   result.add(pd);
	    	}
	    	
	    	|
	    	
	    	pd = ParameterArray() {
	    	   pd.setAttributeSections(asl);
	    	   result.add(pd);
	    	}
	    	
	      )
	      
	    )*
         
   ]         
  ")"
  {
      return result;
  }
}

ParameterDeclaration FormalParameter() :
{
    Identifier id;
    TypeReference tr;
    ModifierMutableList ml = new ModifierArrayList();
    Modifier mod = null;
    VariableSpecification vspec;
    ParameterDeclaration result;
}
{
  [
  
   "ref" { 
      mod = factory.createRef(); 
      setPrefixInfo(mod); 
      setPostfixInfo(mod); 
	  ml.add(mod);      
      } 
      
   |
   
   "out" { 
      mod = factory.createOut(); 
      setPrefixInfo(mod); 
      setPostfixInfo(mod); 
	  ml.add(mod);      
      } 
      
  ]
  tr = Type() 
  id = VariableDeclaratorId() 
  {
      result = factory.createParameterDeclaration(tr,id);
      result.setModifiers(ml);
      vspec = result.getVariables().getVariableSpecification(0); 
      setPrefixInfo(vspec);
      setPostfixInfo(vspec);
      setPostfixInfo(result);
      setPrefixInfo(result); 
      return result;
  }
}

ParameterDeclaration ParameterArray() :
{
    Identifier id;
    TypeReference tr;
    ModifierMutableList ml = new ModifierArrayList();
    Modifier mod = null;
    VariableSpecification vspec;
    ParameterDeclaration result;
}
{

  "params"
   { 
      mod = factory.createParams(); 
      setPrefixInfo(mod); 
      setPostfixInfo(mod); 
	  ml.add(mod);      
   }
      
  
  tr = Type()
  id = VariableDeclaratorId() 
  {
      result = factory.createParameterDeclaration(tr, id);
      result.setModifiers(ml);
      vspec = result.getVariables().getVariableSpecification(0);
      setPrefixInfo(vspec);
      setPostfixInfo(vspec); 
      setPostfixInfo(result);
      setPrefixInfo(result); 
      return result;
  }
}


ParameterDeclaration InformalParameter() :
{
    Identifier id=null;
    TypeReference tr;
    ModifierMutableList ml = new ModifierArrayList();
    Modifier mod = null;
    VariableSpecification vspec;
    ParameterDeclaration result;
}
{
  tr = Type()
  [ id = VariableDeclaratorId() ]
  {
      result = factory.createParameterDeclaration();
      if (tr != null) {
      	result.setTypeReference(tr);
      }
      if (id != null) {
      	vspec = factory.createVariableSpecification(id);
      	setPrefixInfo(vspec);
      	setPostfixInfo(vspec);
      	result.setVariableSpecification(vspec);
      }
      result.setModifiers(ml);
      setPostfixInfo(result);
      setPrefixInfo(result); 
      return result;
  }
}


///////////////////////// PROPERTIES /////////////////////////

GetAccessor GetAccessor() :
{ 
  GetAccessor result = null;
  StatementBlock stmnt = null;
}
{


  "get" 
  	{
  		result = factory.createGetAccessor();
  		setPrefixInfo(result);
  	}
  (
  
    stmnt = Block() 
    	{
    		 result.setStatementBlock(stmnt);
    	}
    |
    ";" 
  )
  {
  	setPostfixInfo(result);
  	return result;	
  }  
}

SetAccessor SetAccessor() :
{ 
  SetAccessor result = null;
  StatementBlock stmnt = null;
}
{

  "set" 
  	{
  		result = factory.createSetAccessor();
  		setPrefixInfo(result);
  	}
  (
  
    stmnt = Block() 
    	{
    		 result.setStatementBlock(stmnt);
    	}
    |
    ";" 
  )
  {
  	setPostfixInfo(result);
  	return result;	
  }  
}

AddAccessor AddAccessor() :
{ 
  AddAccessor result = null;
  StatementBlock stmnt = null;
}
{

  "add" 
  	{
  		result = factory.createAddAccessor();
  		setPrefixInfo(result);
  	}
  (
  
    stmnt = Block() 
    	{
    		 result.setStatementBlock(stmnt);
    	}
    |
    ";" 
  )
  {
  	setPostfixInfo(result);
  	return result;	
  }  
}

RemoveAccessor RemoveAccessor() :
{ 
  RemoveAccessor result = null;
  StatementBlock stmnt = null;
}
{

  "remove" 
  	{
  		result = factory.createRemoveAccessor();
  		setPrefixInfo(result);
  	}
  (
  
    stmnt = Block() 
    	{
    		 result.setStatementBlock(stmnt);
    	}
    |
    ";" 
  )
  {
  	setPostfixInfo(result);
  	return result;	
  }  
}

///////////////////// INDEXERS ////////////////////////////////

void IndexerDeclarationLookahead() :
{}
{
  ( "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" 
  | "override" | "abstract" | "extern" )*
  ResultType() [ Name() "." ] "this" "[" 
}



IndexerDeclaration IndexerDeclaration() :
{
  ModifierMutableList ml = new ModifierArrayList();
  Modifier m = null;
  TypeReference tr;
  UncollatedReferenceQualifier ifr = null;
  GetAccessor getBlock = null;
  SetAccessor setBlock = null;
  IndexerDeclaration result;
  ParameterDeclarationMutableList pdl;
  AttributeSectionMutableList asl;
  MemberName mname;
}
{
  (
    (
      ( "new"          { m = factory.createNewModifier(); }        )
    | ( "public"       { m = factory.createPublic(); }        )
    | ( "protected"    { m = factory.createProtected(); }     )
    | ( "internal"     { m = factory.createInternal(); }        )
    | ( "private"      { m = factory.createPrivate(); }       )
    | ( "virtual"      { m = factory.createVirtual(); }         )
    | ( "sealed"       { m = factory.createSealed(); }         )
    | ( "abstract"     { m = factory.createAbstract(); }      )
    | ( "override"     { m = factory.createOverride(); }        )
    | ( "extern"       { m = factory.createExtern(); }  )
    )
    {
	setPrefixInfo(m);
	setPostfixInfo(m);
	ml.add(m);
    }
  )*
  tr = Type() {
      result=factory.createIndexerDeclaration();
      setPrefixInfo(result);
      result.setTypeReference(tr);
  }
  
  [
    ifr = Name() "."
  ]
 
  "this" {
  	  Identifier id=factory.createIdentifier(token.image);  	  
  	  setPrefixInfo(id);
  	  setPostfixInfo(id);
  	  TypeReference tmp;
  	  mname=factory.createMemberName(id);
  	  if (ifr != null) {
  	  		tmp = ifr.toTypeReference(); 
  	  		setPrefixInfo(tmp);
  	  		setPostfixInfo(tmp);
			mname.setInterfaceType(tmp);
	  }
      setPrefixInfo(mname);
      setPostfixInfo(mname);
	  result.setMemberName(mname);
  }
 
  pdl = IndexerParameters()  
  
  
  "{"
  	asl = AttributeSections()
    (
      ( getBlock = GetAccessor()
      		{
      			getBlock.setAttributeSections(asl);
      		}
      		 
      	[ asl = AttributeSections() setBlock = SetAccessor() 
      		{
      			setBlock.setAttributeSections(asl);
      		}
      	] 
      )
      |
      ( setBlock = SetAccessor() 
      		{
      			setBlock.setAttributeSections(asl);
      		}
      	[ asl = AttributeSections() getBlock = GetAccessor() 
      		{
      			getBlock.setAttributeSections(asl);
      		}
      	] 
      )
    )
  "}"
  {
	  result.setParameters(pdl);
      result.setModifiers(ml);
      result.setGetAccessor(getBlock);
      result.setSetAccessor(setBlock);      
      setPostfixInfo(result);
      return result;
  }
}


ParameterDeclarationMutableList IndexerParameters() :
{
    ParameterDeclaration pd;
    ParameterDeclarationMutableList result = new ParameterDeclarationArrayList();
}
{
  "["
      [       pd = FormalParameter() { result.add(pd); }
        ( "," pd = FormalParameter() { result.add(pd); } )* ]
       
  "]"
  {
      return result;
  }
}


//////////////// OPERATOR OVERLOAD /////////////////////////

OperatorDeclaration OperatorOverloadDeclaration() :
{
  ModifierMutableList ml = new ModifierArrayList();
  Modifier m = null;
  TypeReference tr;
  StatementBlock body = null;
  OperatorDeclaration result;
  ParameterDeclarationMutableList pdl;
}
{
  (
    (
      ( "public"       { m = factory.createPublic(); }        )
    | ( "static"       { m = factory.createStatic(); }        )
    | ( "extern"       { m = factory.createExtern(); }  )
    )
    {
	setPrefixInfo(m);
	setPostfixInfo(m);
	ml.add(m);
    }
  )*
  tr = Type()
  "operator" {
      result = factory.createOperatorDeclaration();
      setPrefixInfo(result);
  }

  ( 
      "+" { result.setOperatorType(OperatorDeclaration.PLUS); }
    | "-" { result.setOperatorType(OperatorDeclaration.MINUS); }
    | "/" { result.setOperatorType(OperatorDeclaration.DIVIDE); }
    | "*" { result.setOperatorType(OperatorDeclaration.TIMES); }      
    | "%" { result.setOperatorType(OperatorDeclaration.MODULO); }      
    | "!" { result.setOperatorType(OperatorDeclaration.NOT); }      
    | "~" { result.setOperatorType(OperatorDeclaration.BINARY_NOT); }      
    | "&" { result.setOperatorType(OperatorDeclaration.BINARY_AND); }      
    | "|" { result.setOperatorType(OperatorDeclaration.BINARY_OR); }      
    | "^" { result.setOperatorType(OperatorDeclaration.BINARY_XOR); }      
    | "++" { result.setOperatorType(OperatorDeclaration.INCREMENT); }      
    | "--" { result.setOperatorType(OperatorDeclaration.DECREMENT); }      
    | "true" { result.setOperatorType(OperatorDeclaration.TRUE); }      
    | "false" { result.setOperatorType(OperatorDeclaration.FALSE); }      
    | "<<" { result.setOperatorType(OperatorDeclaration.SHIFT_LEFT); }      
    | ">>" { result.setOperatorType(OperatorDeclaration.SHIFT_RIGHT); }      
    | "==" { result.setOperatorType(OperatorDeclaration.EQUALS); }      
    | "!=" { result.setOperatorType(OperatorDeclaration.NOT_EQUALS); }      
    | "<" { result.setOperatorType(OperatorDeclaration.LESS_THAN); }      
    | ">" { result.setOperatorType(OperatorDeclaration.GREATER_THAN); }      
    | "<=" { result.setOperatorType(OperatorDeclaration.LESS_OR_EQUALS); }      
    | ">=" { result.setOperatorType(OperatorDeclaration.GREATER_OR_EQUALS); }      
  )  
  
  pdl = FormalParameters()  
  ( body = Block() | ";" )
  {
      result.setTypeReference(tr);
	  result.setParameters(pdl);
      result.setModifiers(ml);
      result.setBody(body);
      setPostfixInfo(result);
      return result;
  }
}

OperatorDeclaration CastOperatorOverloadDeclaration() :
{
  ModifierMutableList ml = new ModifierArrayList();
  Modifier m = null;
  TypeReference tr;
  StatementBlock body = null;
  OperatorDeclaration result;
  ParameterDeclarationMutableList pdl;
  int operatorType;
}
{
  (
    (
      ( "public"       { m = factory.createPublic(); }        )
    | ( "static"       { m = factory.createStatic(); }        )
    | ( "extern"       { m = factory.createExtern(); }  )
    )
    {
	setPrefixInfo(m);
	setPostfixInfo(m);
	ml.add(m);
    }
  )*

  (
  	"explicit"
  		{
  			operatorType = OperatorDeclaration.EXPLICIT_CAST;
  		}
  	|
  	"implicit"
  		{
  			operatorType = OperatorDeclaration.IMPLICIT_CAST;
  		}
  )
  "operator" {
      result = factory.createOperatorDeclaration();
      result.setOperatorType(operatorType);
      setPrefixInfo(result);
  }


  tr = Type()

  pdl = FormalParameters()  
  ( body = Block() | ";" )
  {
      result.setTypeReference(tr);
	  result.setParameters(pdl);
      result.setModifiers(ml);
      result.setBody(body);
      setPostfixInfo(result);
      return result;
  }
}


/////////////////////////// EVENTS //////////////////////////////

void EventDeclarationLookahead() :
{}
{

  ( "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" 
  | "sealed" | "override" | "abstract"| "extern" )*
  
  "event"
  
}

EventDeclaration EventDeclaration() :
{
    EventDeclaration result;
    ModifierMutableList ml = new ModifierArrayList();
    Modifier m = null;
    TypeReference tr;
}
{
   (
    (
      ( "new"       { m = factory.createNewModifier(); }    )
    | ( "public"    { m = factory.createPublic(); }    )
    | ( "protected" { m = factory.createProtected(); } )
    | ( "internal"  { m = factory.createInternal(); } )
    | ( "private"   { m = factory.createPrivate(); }   )
    | ( "static"    { m = factory.createStatic(); }    )
    | ( "virtual"  { m = factory.createVirtual(); } )
    | ( "sealed"  { m = factory.createSealed(); }  )
    | ( "override"  { m = factory.createOverride(); } )
    | ( "abstract"  { m = factory.createAbstract(); }  )
    | ( "extern"  { m = factory.createExtern(); }  )
    )
    {	
	setPrefixInfo(m);	
	setPostfixInfo(m);
	ml.add(m);
    }
  )*
  
  "event" 
  {
    result = factory.createEventDeclaration();
    setPrefixInfo(result);
    result.setModifiers(ml);
  }
  
  tr = Type()
  {
    result.setTypeReference(tr);
  }
  
  (
  
    LOOKAHEAD( Name() "{") PropertyLikeEventDeclaration(result)
    
    |
    
    FieldLikeEventDeclaration(result)
    
  )

  {
    setPostfixInfo(result);
    return result;
  }  
}

void PropertyLikeEventDeclaration(EventDeclaration result) :
{
    UncollatedReferenceQualifier ifr = null;
    AddAccessor addBlock = null;
    RemoveAccessor removeBlock = null;
    Identifier id;
    MemberName mname;
	AttributeSectionMutableList asl;
}
{
    
	ifr = Name()
		{
			EventSpecification evspec = factory.createEventSpecification();
			setPrefixInfo(evspec);
			mname = ifr.toMemberName();
			setPrefixInfo(mname);
			setPostfixInfo(mname);
			evspec.setMemberName(mname);
			setPostfixInfo(evspec);
			FieldSpecificationMutableList fl = new FieldSpecificationArrayList();
			fl.add(evspec);
			result.setFieldSpecifications(fl);
		}
    
   "{"
  asl = AttributeSections()
    (
      ( addBlock = AddAccessor() 
      		{
      			addBlock.setAttributeSections(asl);
      		}
      	[ asl = AttributeSections() removeBlock = RemoveAccessor() 
      									{
      										removeBlock.setAttributeSections(asl);
      									}
      
      	] 
      )
      |
      ( removeBlock = RemoveAccessor() 
      		{
      			removeBlock.setAttributeSections(asl);
      		}
      
      
      	[ asl = AttributeSections() addBlock = AddAccessor() 
      									{
      										addBlock.setAttributeSections(asl);
      									}
      									
      	
      	] 
      )
    )
    
   "}"

  {
	result.setAddAccessor(addBlock);
	result.setRemoveAccessor(removeBlock);
  }
   
}

void FieldLikeEventDeclaration(EventDeclaration result) :
{
    TypeReference tr;
    FieldSpecificationMutableList vl = new FieldSpecificationArrayList();
    EventSpecification var;
}
{

   var = FieldLikeEventSpecificationDeclarator()
      {
	  vl.add((FieldSpecification)var);
      }
  (
    ","
    var = FieldLikeEventSpecificationDeclarator()
    {
	  vl.add((FieldSpecification)var);
    }
  )*
  ";"
  {
    result.setFieldSpecifications(vl);
  }
}



EventSpecification FieldLikeEventSpecificationDeclarator():
{
    Identifier id;
    Expression init = null;
    EventSpecification result;
}
{
    id = VariableDeclaratorId() 
    [ "=" init = VariableInitializer() ]
    {
	result = factory.createEventSpecification();
    setPrefixInfo(result); // only after "=" !!!!!!!!!!!!!!!
	MemberName mname = factory.createMemberName(id);
	setPrefixInfo(mname);
	setPostfixInfo(mname);
	result.setMemberName(mname);
	result.setInitializer(init);
    setPrefixInfo(result); // only after "=" !!!!!!!!!!!!!!!
    setPostfixInfo(result);
    return result;
  }
}


/////////////////////////// PROPERTY ////////////////////////////

void PropertyDeclarationLookahead() :
{}
{
  ( "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" 
  | "sealed" | "override" | "abstract"| "extern" )*
  Type() Name() "{"  
}


PropertyDeclaration PropertyDeclaration() :
{
    PropertyDeclaration result;
    ModifierMutableList ml = new ModifierArrayList();
    Modifier m = null;
    TypeReference tr;
    UncollatedReferenceQualifier ifr = null;
    GetAccessor getBlock=null;
    SetAccessor setBlock=null;
    Identifier id;
    MemberName mname;
    AttributeSectionMutableList asl;
}
{
   (
    (
      ( "new"       { m = factory.createNewModifier(); }    )
    | ( "public"    { m = factory.createPublic(); }    )
    | ( "protected" { m = factory.createProtected(); } )
    | ( "internal"  { m = factory.createInternal(); } )
    | ( "private"   { m = factory.createPrivate(); }   )
    | ( "static"    { m = factory.createStatic(); }    )
    | ( "virtual"  { m = factory.createVirtual(); } )
    | ( "sealed"  { m = factory.createSealed(); }  )
    | ( "override"  { m = factory.createOverride(); } )
    | ( "abstract"  { m = factory.createAbstract(); }  )
    | ( "extern"  { m = factory.createExtern(); }  )
    )
    {	
	setPrefixInfo(m);	
	setPostfixInfo(m);
	ml.add(m);
    }
  )*
  tr = Type()
  {
    result = factory.createPropertyDeclaration();
    setPrefixInfo(result);
    result.setModifiers(ml);
    result.setTypeReference(tr);
  }
	ifr = Name()
		{
			PropertySpecification propSpec = factory.createPropertySpecification();
			setPrefixInfo(propSpec);
			mname = ifr.toMemberName();
			setPrefixInfo(mname);
			setPostfixInfo(mname);
			propSpec.setMemberName(mname);
			setPostfixInfo(propSpec);
			result.setPropertySpecification(propSpec);
		}
  
  "{"
  	asl = AttributeSections()
    (
      ( getBlock = GetAccessor()
      		{
      			getBlock.setAttributeSections(asl);
      		}
      		 
      	[ asl = AttributeSections() setBlock = SetAccessor() 
      		{
      			setBlock.setAttributeSections(asl);
      		}
      	] 
      )
      |
      ( setBlock = SetAccessor() 
      		{
      			setBlock.setAttributeSections(asl);
      		}
      	[ asl = AttributeSections() getBlock = GetAccessor() 
      		{
      			getBlock.setAttributeSections(asl);
      		}
      	] 
      )
    )
  "}"

  {
	result.setGetAccessor(getBlock);
	result.setSetAccessor(setBlock);

    //    setPrefixInfo(result);
    setPostfixInfo(result);
    return result;
  }
}


////////////////////////// FIELDS //////////////////////////////

void FieldDeclarationLookahead() :
{}
{
  ( "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" 
  | "volatile" )*
  Type() CSIdentifier()  
}


FieldDeclaration FieldDeclaration() :
{
    FieldDeclaration result;
    ModifierMutableList ml = new ModifierArrayList();
    Modifier m = null;
    TypeReference tr;
    FieldSpecificationMutableList vl = new FieldSpecificationArrayList();
    VariableSpecification var;
}
{
   (
    (
      ( "new"       { m = factory.createNewModifier(); }    )
    | ( "public"    { m = factory.createPublic(); }    )
    | ( "protected" { m = factory.createProtected(); } )
    | ( "internal"  { m = factory.createInternal(); } )
    | ( "private"   { m = factory.createPrivate(); }   )
    | ( "static"    { m = factory.createStatic(); }    )
    | ( "readonly"  { m = factory.createReadonly(); } )
    | ( "volatile"  { m = factory.createVolatile(); }  )
    )
    {	
	setPrefixInfo(m);	
	setPostfixInfo(m);
	ml.add(m);
    }
  )*
  tr = Type()
  {
    result = factory.createFieldDeclaration();
    setPrefixInfo(result);
    result.setModifiers(ml);
    result.setTypeReference(tr);
  }
  var = VariableDeclarator(true)
      {
	  vl.add((FieldSpecification)var);
      }
  (
    ","
    var = VariableDeclarator(true)
    {
	  vl.add((FieldSpecification)var);
    }
  )*
  ";"
  {
    result.setFieldSpecifications(vl);
    setPostfixInfo(result);
    return result;
  }
}

///////////////////////// STATEMENTS AND BLOCKS ///////////////////
Statement Statement() :
{
  Statement result = null;
  Expression expr;
}
{
(
LOOKAHEAD(2) result = LabeledStatement()
| result = Block()
| result = EmptyStatement()
| expr   = StatementExpression() ";"
  {
      try {
	  result = (ExpressionStatement)expr;
      }
      catch (ClassCastException cce) {
	  // this is a semantical error!!!
	  throw new ParseException("Class cast error: ExpressionStatement expected - found " + recoder.convenience.Format.toString("%c @%p %s", expr));
      }
  }
| result = SwitchStatement()
| result = IfStatement()
| result = WhileStatement()
| result = DoStatement()
| result = ForStatement()
| result = ForeachStatement()
| LOOKAHEAD(6) result =  BreakStatement()
| result = ContinueStatement()
| LOOKAHEAD(6) result =  ReturnStatement()
| result = ThrowStatement()
| result = GotoStatement()
| result = LockStatement()
| /* LOOKAHEAD(3) */ result = UsingStatement()
| result = CheckedStatement()
| result = UncheckedStatement()
| result = TryStatement()
)
  {
    setPostfixInfo(result);
    return result;
  }
}

LabeledStatement LabeledStatement() :
{
  LabeledStatement result;
  Identifier id;
  Statement stat;
}
{
  CSIdentifier()
  {
      id = factory.createIdentifier(token.image);
      setPrefixInfo(id);
      setPostfixInfo(id);
  }
  ":"
  {
      result = factory.createLabeledStatement();
      setPrefixInfo(result);
      result.setIdentifier(id);
  }
  stat = Statement()
  {
    result.setBody(stat);
    setPostfixInfo(result);
    return result;
  }
}


StatementBlock Block() :
{
  StatementBlock result;
  StatementMutableList sl = new StatementArrayList();
  Statement stat;
}
{
  "{"
  {
    result = factory.createStatementBlock();
    setPrefixInfo(result);
  }
  ( stat = BlockStatement()
    {
      sl.add(stat);
    }
  )*  
  "}"
  {
    result.setBody(sl);
    setPostfixInfo(result);
    return result;
  }
}

Statement BlockStatement() :
{
  Statement result;
}
{
(
  LOOKAHEAD(Type() CSIdentifier())
  result = LocalVariableDeclaration() ";"

 | LOOKAHEAD ("const" Type() CSIdentifier()) 
  result = LocalConstantDeclaration() ";"

 | result = Statement()
)
  {
    setPostfixInfo(result);
    return result;
  }
}

LocalVariableDeclaration LocalVariableDeclaration() :
{
  LocalVariableDeclaration result;
  VariableSpecificationMutableList vl = new VariableSpecificationArrayList(1);
  TypeReference tr;
  VariableSpecification var;
}
{
  {
    result = factory.createLocalVariableDeclaration();
    setPrefixInfo(result);
  }
  tr = Type()
  var = VariableDeclarator(false) { vl.add(var); }
  ( "," 
    var = VariableDeclarator(false)  { vl.add(var); }
  )*
  {
      result.setTypeReference(tr);
      result.setVariableSpecifications(vl);
      setPostfixInfo(result);
      return result;
  }
}

LocalVariableDeclaration LocalConstantDeclaration() :
{
  LocalConstantDeclaration result;
  VariableSpecificationMutableList vl = new VariableSpecificationArrayList(1);
  TypeReference tr;
  VariableSpecification var;
}
{
  {
    result = factory.createLocalConstantDeclaration();
    setPrefixInfo(result);
  }
  "const"
  tr = Type()
  var = ConstantDeclarator(false) { vl.add(var); }
  ( "," 
    var = ConstantDeclarator(false)  { vl.add(var); }
  )*
  {
      result.setTypeReference(tr);
      result.setVariableSpecifications(vl);
      setPostfixInfo(result);
      return result;
  }
}


EmptyStatement EmptyStatement() :
{
    EmptyStatement result;
}
{
  ";"
  {
    result = factory.createEmptyStatement(); 
    setPrefixInfo(result);
    setPostfixInfo(result);
    return result;
  }
}

// switch

Switch SwitchStatement() :
{
  Switch result;
  Expression expr;
  BranchMutableList branches = new BranchArrayList(2);
  Branch branch;
  StatementMutableList stats;
  Statement stat;
}
{
  "switch" 
  {
      result = factory.createSwitch();
      setPrefixInfo(result);
   } 
   "(" expr = Expression() ")" "{"
    ( branch = SwitchLabel()
      {
        stats = new StatementArrayList();
      }
      ( stat = BlockStatement()
        {
          stats.add(stat);
	}
      )*
      {
        if (branch instanceof Case) {
	  ((Case)branch).setBody(stats);
	} else {
	  ((Default)branch).setBody(stats);
	}
	branches.add(branch);
      }
    )*
  "}"
  {
      result.setExpression(expr);
      result.setBranchList(branches);
      setPostfixInfo(result);
      return result;
  }
}

Branch SwitchLabel() :
/*
 * The returned branch is not completely initialized - only the label is set
 */
{
  Branch result;
  Expression expr;
}
{
(
  ( "case"  
    { 
	result = factory.createCase(); 
	setPrefixInfo(result); 
    } 
    expr = Expression() 
    ":"  
    { 
	((Case)result).setExpression(expr); 
    } 
  )
  | 
  ( "default"
    { 
	result = factory.createDefault(); 
	setPrefixInfo(result); 
    } 
    ":" 
  )
)
  {
    setPostfixInfo(result);
    return result;
  }
}

// if

If IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{
  If result;
  Expression cond;
  Then thenStat;
  Else elseStat = null;
  Statement trueStat;
  Statement falseStat = null;
}
{
  "if" 
  {
      result = factory.createIf();
      setPrefixInfo(result);
  }
  "(" cond = Expression() ")" 
  {
      thenStat = factory.createThen();
      setPrefixInfo(thenStat);
  }
  trueStat = Statement()
  {
     thenStat.setBody(trueStat);
  }
  [ LOOKAHEAD(1) "else" 
    {
	elseStat = factory.createElse();
	setPrefixInfo(elseStat);
    }
    falseStat = Statement() 
    {
       elseStat.setBody(falseStat);
    }
  ]
  {
      result.setExpression(cond);
      result.setThen(thenStat);
      if (elseStat != null) {
	  result.setElse(elseStat);
      }
      setPostfixInfo(result);
      return result;
  }
}

// while

While WhileStatement() :
{
  While result;
  Expression expr;
  Statement stat;
}
{
  "while" 
  {
    result = factory.createWhile();
    setPrefixInfo(result);
  }
  "(" expr = Expression() ")" stat = Statement()
  {
    result.setGuard(expr);
    result.setBody(stat);
    setPostfixInfo(result);
    return result;
  }
}

// do

Do DoStatement() :
{
  Do result;
  Expression expr;
  Statement stat;
}
{
  "do" 
  {
      result = factory.createDo();
      setPrefixInfo(result);
  }
  stat = Statement() "while" "(" expr = Expression() ")" ";"
  {
    result.setGuard(expr);
    result.setBody(stat);    
    setPostfixInfo(result);
    return result;
  }
}

// for

For ForStatement() :
{
    For result;
    LoopInitializerMutableList init = null;
    Expression guard = null;
    ExpressionMutableList update = null;
    Statement body;
}
{
  "for" 
  {
      result = factory.createFor();
      setPrefixInfo(result);
  }
   "(" [ init = ForInit() ] ";"
       [ guard = Expression() ] ";"
        [ update = ForUpdate() ] ")"
      body = Statement()
  {
      result.setInitializers(init);
      result.setGuard(guard);
      result.setUpdates(update);
      result.setBody(body);
      setPostfixInfo(result);
      return result;
  }
}

LoopInitializerMutableList ForInit() :
{
    LoopInitializerMutableList result = new LoopInitializerArrayList();
    LocalVariableDeclaration varDecl = null;
    ExpressionList exprs = null;
}
{
(
  LOOKAHEAD( Type() CSIdentifier() )
  varDecl = LocalVariableDeclaration()
| exprs   = StatementExpressionList()
)
    {
	if (varDecl != null) {
	    result.add(varDecl);
	} else {
	    for (int i =  0, s = exprs.size(); i < s; i += 1) {
		result.add((LoopInitializer)exprs.getExpression(i));
	    }
	}
	return result;
    }
}

ExpressionMutableList StatementExpressionList() :
{
    ExpressionMutableList result = new ExpressionArrayList();
    Expression expr;
}
{
        expr = StatementExpression() { result.add(expr); }
  ( "," expr = StatementExpression() { result.add(expr); } )*
  {
      return result;
  }
}

ExpressionMutableList ForUpdate() :
{
    ExpressionMutableList result;
}
{
  result = StatementExpressionList()
  { 
    return result;
  }
}

// break

Break BreakStatement() :
{
    Identifier id = null;
    Break result;
}
{
//
// ADDITION!
// yield style breaks for iterators
//
	("yield")*
  "break" 
  { 
      result = factory.createBreak(); 
      setPrefixInfo(result); 
   }
  ";"
  {
    setPostfixInfo(result);
    return result;
  }
}

// continue

Continue ContinueStatement() :
{
    Identifier id = null;
    Continue result;
}
{
  "continue" 
  {
      result = factory.createContinue();
      setPrefixInfo(result);     
  }
  ";"
  {
    setPostfixInfo(result);
    return result;
  }
}

// return

Return ReturnStatement() :
{
    Expression expr = null;
    Return result;
}
{
//
// ADDITION!
// yielding return statements for iterators
//
  ("yield")*
  "return" 
  {
      result = factory.createReturn();
      setPrefixInfo(result);
  }
  [ expr = Expression() 
    { 
	result.setExpression(expr); 
    } 
  ]   
  ";"
  {
    setPostfixInfo(result);
    return result;
  }

}

// throw

Throw ThrowStatement() :
{
    Throw result;
    Expression expr;
}
{
  "throw" 
  {
      result = factory.createThrow();      
      setPrefixInfo(result);
  }
  [    expr = Expression() 
  	   {
  	     result.setExpression(expr);
  	   }
  ]
  ";"
  {
      setPostfixInfo(result);
      return result;
  }
}

// lock

LockedBlock LockStatement() :
{
    LockedBlock result;
    Expression expr;
    Statement block;
}
{
  "lock" 
  {
      result = factory.createLockedBlock();
      setPrefixInfo(result);
  }
  "(" expr = Expression() ")"
  block = Statement()
  
  {
      result.setExpression(expr);
      result.setBody(block);
      setPostfixInfo(result);
      return result;
  }
}

// using

UsingBlock UsingStatement() :
{
    UsingBlock result = null;
    Expression expr;
    LocalVariableDeclaration decl;
    Statement block;
}
{
  "using" 
  "(" 
  {
      result = factory.createUsingBlock();
      setPrefixInfo(result);
  }
    ( LOOKAHEAD( Type() CSIdentifier()) 
    decl = LocalVariableDeclaration() 
      		 {
      		   result.setLocalVariableDeclaration(decl);
      		 }
      |     
      expr = Expression() 
             {
               result.setExpression(expr);
             }
    )
  ")"
  block = Statement()
  {
      result.setBody(block);
      setPostfixInfo(result);
      return result;
  }
}

// try

Try TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{
    Try result;
    StatementBlock block;
    ParameterDeclaration param = null;
    BranchMutableList branches = new BranchArrayList(1);
    Catch cat;
    Finally fin;
}
{
  "try"
      {
        result = factory.createTry();
	    setPrefixInfo(result);
      }
  block = Block()
      {
	  result.setBody(block);
      }
  ( "catch" 
    {
      cat = factory.createCatch();
      setPrefixInfo(cat);
    }
    [ 
      "("  param = InformalParameter()  ")" 
    ]
    block = Block()
    {
	cat.setParameterDeclaration(param);
	cat.setBody(block);
	branches.add(cat);
    }
  )*
  [ "finally" 
     {
	 fin = factory.createFinally();
	 setPrefixInfo(fin);
     }
    block = Block()
      {
	  fin.setBody(block);
	  branches.add(fin);
      }
  ]
  {
    result.setBranchList(branches);
    setPostfixInfo(result);
    return result;
  }
}

// checked

CheckedBlock CheckedStatement() :
{
    CheckedBlock result;
    Expression expr;
    StatementBlock block;
}
{
  "checked" 
  {
      result = factory.createCheckedBlock();
      setPrefixInfo(result);
  }
  block = Block()
  {
      result.setBody(block);
      setPostfixInfo(result);
      return result;
  }
}

// unchecked

UncheckedBlock UncheckedStatement() :
{
    UncheckedBlock result;
    Expression expr;
    StatementBlock block;
}
{
  "unchecked" 
  {
      result = factory.createUncheckedBlock();
      setPrefixInfo(result);
  }
  block = Block()
  {
      result.setBody(block);
      setPostfixInfo(result);
      return result;
  }
}

// goto

Goto GotoStatement() :
{
    Goto result;
    Expression expr;
    Identifier id;
}
{
  "goto" 
  {
      result = factory.createGoto();
      setPrefixInfo(result);
  }
  ( 
      CSIdentifier() {
          id = factory.createIdentifier(token.image);
          result.setIdentifier(id);
      }
      
      |
      
      ( 
        "case" expr = Expression() {
          id = factory.createIdentifier("case");
          result.setIdentifier(id);
          result.setCaseExpression(expr);    
        }
      )
      
      |
      
      "default" {
          id = factory.createIdentifier("default");
          result.setIdentifier(id);
          }
  
  )
  ";"
  {
      setPostfixInfo(result);
      return result;
  }
}


// foreach

Foreach ForeachStatement() :
{
    Foreach result;
    Expression container = null;
    Identifier id = null;
    Statement body;
    TypeReference tr;
}
{
  "foreach" 
  {
      result = factory.createForeach();
      setPrefixInfo(result);
  }
   "(" 
       tr = Type()
       
       CSIdentifier()
        { 
          id = factory.createIdentifier(token.image);
          setPrefixInfo(id);
          setPostfixInfo(id);
        }
        
       "in"
       container = Expression()
   ")"
      body = Statement()
  {
      result.setIdentifier(id);
      result.setExpression(container);
      result.setTypeReference(tr);
      result.setBody(body);
      setPostfixInfo(result);
      return result;
  }
}

// statement expressions

Expression StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{
    Expression result;
    Expression expr;
    Assignment op;
    ExpressionMutableList leftRight;
}
{
(
  result = PreIncrementExpression()
| result = PreDecrementExpression()
| (
    result = PrimaryExpression()
    [
      "++" { 
	  result = factory.createPostIncrement(result); 
	  setPrefixInfo(result);
      }
    | "--" { 
	result = factory.createPostDecrement(result); 
	setPrefixInfo(result);
      }
    | ( op = AssignmentOperator()
        expr = Expression()
        {
	  leftRight = new ExpressionArrayList(2);
	  leftRight.add(result);
	  leftRight.add(expr);
	  op.setArguments(leftRight);
	  result = op;
        }
      )
    ]
  )
)
  {
    setPostfixInfo(result);
    return result;
  }
}


/////////////////////////////////////////////////////////////////////////////
////////////////////          EXPRESSIONS                  //////////////////
/////////////////////////////////////////////////////////////////////////////

Expression Expression() :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{
    Expression result;
    Expression expr;
    Assignment op;
    ExpressionMutableList leftRight = new ExpressionArrayList();
}
{
  result = ConditionalExpression()
  [ 
    op   = AssignmentOperator()
    expr = Expression()
    {
	leftRight.add(result);
	leftRight.add(expr);
	op.setArguments(leftRight);
	result = op;
    }
  ]
  { 
      setPostfixInfo(result);
      return result;
  }

}

Assignment AssignmentOperator() :
{
    Assignment result;
}
{
  (   "="    { result = factory.createCopyAssignment(); }
    | "*="   { result = factory.createTimesAssignment(); }
    | "/="   { result = factory.createDivideAssignment(); }
    | "%="   { result = factory.createModuloAssignment(); }
    | "+="   { result = factory.createPlusAssignment(); }
    | "-="   { result = factory.createMinusAssignment(); }
    | "<<="  { result = factory.createShiftLeftAssignment(); }
    | ">>="  { result = factory.createShiftRightAssignment(); }
    | "&="   { result = factory.createBinaryAndAssignment(); }
    | "^="   { result = factory.createBinaryXOrAssignment(); }
    | "|="   { result = factory.createBinaryOrAssignment(); }
  )
  {
    setPostfixInfo(result);
    setPrefixInfo(result);
    return result;
  }
}

Expression ConditionalExpression() :
{
    Expression result;
    Expression expr1;
    Expression expr2;
    Operator op;
}
{
  result = ConditionalOrExpression()
  [ "?" { op = factory.createConditional(); setPrefixInfo(op); }
    expr1 = Expression()
    ":" expr2 = ConditionalExpression()
    {
	ExpressionMutableList args = new ExpressionArrayList(3);
	args.add(result);
	args.add(expr1);
	args.add(expr2);
	op.setArguments(args);
	result = op;
    }
  ]
  { 
    setPostfixInfo(result);
    return result;
  }
}

Expression ConditionalOrExpression() :
{
    Expression result;
    Expression expr;
    Operator op;
}
{
  result = ConditionalAndExpression()
  ( "||" { op = factory.createLogicalOr(); setPrefixInfo(op); }
    expr = ConditionalAndExpression()
    {
	ExpressionMutableList args = new ExpressionArrayList(2);
	args.add(result);
	args.add(expr);
	op.setArguments(args);
	result = op;
    }
  )*
  { 
    setPostfixInfo(result);
    return result;
  }
}

Expression ConditionalAndExpression() :
{
    Expression result;
    Expression expr;
    Operator op;
}
{
  result = InclusiveOrExpression()
  ( "&&" { op = factory.createLogicalAnd(); setPrefixInfo(op); }
    expr = InclusiveOrExpression()
    {
	ExpressionMutableList args = new ExpressionArrayList(2);
	args.add(result);
	args.add(expr);
	op.setArguments(args);
	result = op;
    }
  )*
  { 
    setPostfixInfo(result);
    return result;
  }
}

Expression InclusiveOrExpression() :
{
    Expression result;
    Expression expr;
    Operator op;
}
{
  result = ExclusiveOrExpression()
  ( "|" { op = factory.createBinaryOr(); setPrefixInfo(op); }
    expr = ExclusiveOrExpression()
    {
	ExpressionMutableList args = new ExpressionArrayList(2);
	args.add(result);
	args.add(expr);
	op.setArguments(args);
	result = op;
    }
  )*
  { 
    setPostfixInfo(result);
    return result;
  }
}

Expression ExclusiveOrExpression() :
{
    Expression result;
    Expression expr;
    Operator op;
}
{
  result = AndExpression()
  ( "^" { op = factory.createBinaryXOr(); setPrefixInfo(op); }
      expr = AndExpression()
      {
	ExpressionMutableList args = new ExpressionArrayList(2);
	args.add(result);
	args.add(expr);
	op.setArguments(args);
	result = op;
      }
  )*
  { 
    setPostfixInfo(result);
    return result;
  }
}

Expression AndExpression() :
{
    Expression result;
    Expression expr;
    Operator op;
}
{
  result = EqualityExpression()
  ( "&" { op = factory.createBinaryAnd(); setPrefixInfo(op); }
    expr = EqualityExpression()
    {
	ExpressionMutableList args = new ExpressionArrayList(2);
	args.add(result);
	args.add(expr);
	op.setArguments(args);
	result = op;
    }
  )*
  { 
    setPostfixInfo(result);
    return result;
  }
}

Expression EqualityExpression() :
{
    Expression result;
    Expression expr;
    Operator cmp;
}
{
  result = InstanceOfExpression()
  
  ( (   "==" { cmp = factory.createEquals(); setPrefixInfo(cmp); }
      | "!=" { cmp = factory.createNotEquals(); setPrefixInfo(cmp); }
    )
    
    expr = InstanceOfExpression()
    
    {
	ExpressionMutableList args = new ExpressionArrayList(2);
	args.add(result);
	args.add(expr);
	cmp.setArguments(args);
	result = cmp;
    }
  )*
  { 
    setPostfixInfo(result);
    return result;
  }
}

Expression InstanceOfExpression() :
{
    Expression result;
    TypeReference tr;
}
{
  result = RelationalExpression()
  [ ("is" tr = Type()
     {
	   result = factory.createInstanceof(result, tr);
	   setPrefixInfo(result);
     }
    )
    |
	( "as" tr = Type()
      {
	    result = factory.createAs(result, tr);
	    setPrefixInfo(result);
      }
     )  
    ]
  { 
    setPostfixInfo(result);
    return result;
  }
}

Expression AsExpression() :
{
    Expression result;
    TypeReference tr;
}
{
  result = RelationalExpression()
  [ "as" tr = Type()
    {
	result = factory.createAs(result, tr);
	setPrefixInfo(result);
    }
  ]
  { 
    setPostfixInfo(result);
    return result;
  }
}

Expression RelationalExpression() :
{
    Expression result;
    Operator cmp;
    Expression expr;
}
{
  result = ShiftExpression()
  ( (   "<"  { cmp = factory.createLessThan(); setPrefixInfo(cmp); }
      | ">"  { cmp = factory.createGreaterThan(); setPrefixInfo(cmp); }
      | "<=" { cmp = factory.createLessOrEquals(); setPrefixInfo(cmp); }
      | ">=" { cmp = factory.createGreaterOrEquals(); setPrefixInfo(cmp); }
    )
    expr = ShiftExpression()
    {
	ExpressionMutableList args = new ExpressionArrayList(2);
	args.add(result);
	args.add(expr);
	cmp.setArguments(args);
	result = cmp;
    }
  )*
  { 
    setPostfixInfo(result);
    return result;
  }

}

Expression ShiftExpression() :
{
    Expression result;
    Operator shift;
    Expression expr;
}
{
  result = AdditiveExpression()
  ( (   "<<"  { shift = factory.createShiftLeft(); setPrefixInfo(shift); }
      | ">>"  { shift = factory.createShiftRight(); setPrefixInfo(shift); }
    )
    expr = AdditiveExpression()
    {
	ExpressionMutableList args = new ExpressionArrayList(2);
	args.add(result);
	args.add(expr);
	shift.setArguments(args);
	result = shift;
    }
  )*
  { 
    setPostfixInfo(result);
    return result;
  }

}

Expression AdditiveExpression() :
{
    Expression result;
    Operator add;
    Expression expr;
}
{
  result = MultiplicativeExpression()
    ( LOOKAHEAD(2) ( "+" { add = factory.createPlus(); setPrefixInfo(add); }
      | "-" { add = factory.createMinus(); setPrefixInfo(add); }
    )
    expr = MultiplicativeExpression()
    {
	ExpressionMutableList args = new ExpressionArrayList(2);
	args.add(result);
	args.add(expr);
	add.setArguments(args);
	result = add;
    }
  )*
  { 
    setPostfixInfo(result);
    return result;
  }
}

Expression MultiplicativeExpression() :
{
    Expression result = null;
    Operator mult = null;
    Expression expr;
}
{
  result = UnaryExpression()
  ( (   "*" { mult = factory.createTimes();  setPrefixInfo(mult); }
      | "/" { mult = factory.createDivide(); setPrefixInfo(mult); }
      | "%" { mult = factory.createModulo(); setPrefixInfo(mult); }
    )
    expr = UnaryExpression()
    {
	ExpressionMutableList args = new ExpressionArrayList(2);
	args.add(result);
	args.add(expr);
	mult.setArguments(args);
	result = mult;
    }
  )*
  { 
    setPostfixInfo(result);
    return result;
  }

}

Expression UnaryExpression() :
{
    Expression result;
    Expression expr;
    boolean negative = false;
}
{
(
  ( "+" { result = factory.createPositive(); setPrefixInfo(result); } 
  | "-" { result = factory.createNegative(); setPrefixInfo(result); } )
  expr = UnaryExpression()
  {
      ((Operator)result).setArguments(new ExpressionArrayList(expr));
  }
|
  result = PreIncrementExpression()
|
  result = PreDecrementExpression()
|
  result = UnaryExpressionNotPlusMinus()
)
  { 
    setPostfixInfo(result);
    return result;
  }

}

PreIncrement PreIncrementExpression() :
{
    PreIncrement result;
    Expression expr;
}
{
  "++"
  {
      result = factory.createPreIncrement();
      setPrefixInfo(result);
  } 
  expr = PrimaryExpression()
  {
      result.setArguments(new ExpressionArrayList(expr));
      setPostfixInfo(result);
      return result;
  }
}

PreDecrement PreDecrementExpression() :
{
    PreDecrement result;
    Expression expr;
}
{
  "--" 
  {
      result = factory.createPreDecrement();
      setPrefixInfo(result);
  }
  expr = PrimaryExpression()
  { 
      result.setArguments(new ExpressionArrayList(expr));
      setPostfixInfo(result);
      return result;
  }
}

Expression UnaryExpressionNotPlusMinus() :
{
    Expression result;
    Expression expr;
    boolean    not = false;
}
{
(
  (   "~" { result = factory.createBinaryNot();  setPrefixInfo(result); }
    | "!" { result = factory.createLogicalNot(); setPrefixInfo(result); }
  )
  expr = UnaryExpression()
  {
      ((Operator)result).setArguments(new ExpressionArrayList(expr));
  }
  
|
  LOOKAHEAD( CastLookahead() )
  result = CastExpression()
| 
  result = CheckedExpression()
| 
  result = UncheckedExpression()
|
  result = PostfixExpression()
)
    { 
	setPostfixInfo(result);
	return result;
    }

}

// This production is to determine lookahead only. The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.

void CastLookahead() :
{}
{
  LOOKAHEAD("(" PrimitiveType() ("[" (",")* "]")* ")")
  "(" PrimitiveType() ("[" (",")* "]")* ")"
|
  LOOKAHEAD("(" Name() "[")
  "(" Name() "[" (",")* "]"
|
  LOOKAHEAD("(" ReferenceType() ("[" (",")* "]")* ")")
  "(" ReferenceType() ("[" (",")* "]")* ")"
|
  "(" Name() ")" ( "~" | "!" | "(" | CSIdentifier() | "this" | "base" | "new" | Literal() )


}


Expression CheckedExpression():
{
	Checked result = null;
	Expression expr;
}
{
	"checked" {
		result = factory.createChecked();
		setPrefixInfo(result);
	}
	
	"(" 
	expr = Expression() 
	")"
	{
      result.setArguments(new ExpressionArrayList(expr));
      setPostfixInfo(result);
      return result;
	}
}

Expression UncheckedExpression():
{
	Unchecked result = null;
	Expression expr;
}
{
	"unchecked" {
		result = factory.createUnchecked();
		setPrefixInfo(result);
	}
	
	"(" 
	expr = Expression() 
	")"
	{
      result.setArguments(new ExpressionArrayList(expr));
      setPostfixInfo(result);
      return result;
	}
}

Expression TypeofExpression():
{
	Typeof result = null;
	TypeReference tr;
}
{
	"typeof" {
		result = factory.createTypeof();
		setPrefixInfo(result);
	}
	
	"(" 
	tr = ResultType() 
	")"
	{
      result.setTypeReference(tr);
      setPostfixInfo(result);
      return result;
	}
}


Expression PostfixExpression() :
{
    Expression result;
}
{
  result = PrimaryExpression()
   [  "++" 
    { 
	result = factory.createPostIncrement(result); 
	setPrefixInfo(result);
    }
    | "--" 
    { 
	result = factory.createPostDecrement(result); 
	setPrefixInfo(result);
    }
  ]
  
  { 
    setPostfixInfo(result);
    return result;
  }

}

TypeCast CastExpression() :
{
    TypeCast result = null;
    TypeReference tr;
    Expression expr;
}
{
  {
    result = factory.createTypeCast();
  }
(
  LOOKAHEAD("(" PrimitiveType())
  "(" { setPrefixInfo(result); } tr = Type() ")"
  expr = UnaryExpression()
|
  LOOKAHEAD("(" ReferenceType())
  "(" { setPrefixInfo(result); } tr = Type() ")"
  expr = UnaryExpression()
| "(" { setPrefixInfo(result); } tr = Type() ")"
  expr = UnaryExpressionNotPlusMinus()
)
  {
      result.setTypeReference(tr);
      result.setArguments(new ExpressionArrayList(expr));
      setPostfixInfo(result);
      return result;
  }
}


Expression PrimaryExpression() :
{
    Expression result = null;
    ReferencePrefix tmpResult = null;
}
{
    prefix = PrimaryPrefix()
    {
      // create initial AST construct from prefix only
      switch (prefix.type) {
      case PrimaryPrefixReturnValue.LITERAL:
	  if (prefix.literal instanceof ReferencePrefix) {
//	      tmpResult = (StringLiteral)prefix.literal;
		  tmpResult = (ReferencePrefix) prefix.literal;
	  } else {
	      result = prefix.literal;
	      setPostfixInfo(result);
	      return result;
	      //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	  }
	  break;
      case PrimaryPrefixReturnValue.THIS:
	      tmpResult = factory.createThisReference();
          setPrefixInfo(tmpResult);
          setPostfixInfo(tmpResult);
	  break;
      case PrimaryPrefixReturnValue.SUPER_REFERENCE:
          tmpResult = factory.createSuperReference();
          setPrefixInfo(tmpResult);
          setPostfixInfo(tmpResult);
	  break;
      case PrimaryPrefixReturnValue.SUPER_MEMBER:
          tmpResult = prefix.name;
	  break;
      case PrimaryPrefixReturnValue.PARENTHESIZED_EXPR:
          tmpResult = (ParenthesizedExpression)prefix.expr;
	  break;
      case PrimaryPrefixReturnValue.ALLOCATION_EXPR:
	  tmpResult = (ReferencePrefix)prefix.expr;
	  break;
      case PrimaryPrefixReturnValue.CLASS_REF:
	  tmpResult = factory.createMetaClassReference(null);
          setPrefixInfo(tmpResult);
          setPostfixInfo(tmpResult);
	  break;
      case PrimaryPrefixReturnValue.QUALIFIED_NAME:
	  tmpResult = prefix.name;
	  break;
      default:
	  throw new ParseException("Unknown prefix");
      }
    }
  ( LOOKAHEAD(2) suffix = PrimarySuffix()
    {      
      switch (suffix.type) {
      case PrimarySuffixReturnValue.THIS:
          // the prefix MUST be a type expression!!!!!
	  // we currently only create UncollatedReferenceQualifiers
          if (tmpResult instanceof TypeReference) {
	      tmpResult = 
	         factory.createThisReference((TypeReference)tmpResult);
	      setPrefixInfo(tmpResult);
	      setPostfixInfo(tmpResult);
	  } else if (tmpResult instanceof UncollatedReferenceQualifier) {
	      tmpResult =
	         factory.createThisReference(((UncollatedReferenceQualifier)tmpResult).toTypeReference());
	      setPrefixInfo(tmpResult);
	      setPostfixInfo(tmpResult);
	  } else {
	      throw new ParseException("No type as prefix of `this'");
	  }
	  break;
      case PrimarySuffixReturnValue.ALLOCATION_EXPR:
	  if (suffix.expr instanceof New) {
	      ((New)suffix.expr).setReferencePrefix(tmpResult);
	      tmpResult = (New)suffix.expr;
	  } else {
	      throw new ParseException("Allocation without new?");
	  }
	  break;
      case PrimarySuffixReturnValue.INDEX_EXPR:
          if (tmpResult instanceof UncollatedReferenceQualifier ||
	      tmpResult instanceof MethodReference ||
	      tmpResult instanceof UncollatedMethodCallReference ||
	      tmpResult instanceof ParenthesizedExpression ||
	      tmpResult instanceof VariableReference
// Added here is the allowance of array reference to the "this" and the "base" references too
          || tmpResult instanceof ThisReference
          || tmpResult instanceof SuperReference         	      
	      // The original JAVA version used one Array reference for the 
	      // array accesses following each other ([][]). However, in C#
	      // this is considered as an access to an array access
	      // So we have to create a new ArrayReference which references the
	      // ArrayReference as primary suffix 
	      // 
	      // However, this is the same, as with any other cases
	      || tmpResult instanceof ArrayReference
	      
	      ) {
		  // Now we know that this is an array reference
	      tmpResult = 
	          factory.createArrayReference(tmpResult, suffix.args);
	      setPrefixInfo(tmpResult);
	      setPostfixInfo(tmpResult);
/*	  } else if (tmpResult instanceof ArrayReference) {
	      // we need to add another access dimension
	      ((ArrayReference)tmpResult).getDimensionExpressions().add(suffix.expr);
	      
*/	      
	      
	  } else {
	      throw new ParseException("Bad index context - " +
				       tmpResult.getClass().getName() + "?!");
	      /*
		e.g. StringLiteral, TypeReference, NewArray
		(would have to be in parentheses), SuperReference, ...
	      */
	  }
          break;
      case PrimarySuffixReturnValue.IDENTIFIER:
          tmpResult = factory.createUncollatedReferenceQualifier(tmpResult, suffix.id);
          setPrefixInfo(tmpResult);
          setPostfixInfo(tmpResult);
          break;
      case PrimarySuffixReturnValue.ARGUMENTS:
          // method call -determine the kind of method
          if (tmpResult instanceof UncollatedReferenceQualifier) {
	      // this is a normal method call
	      tmpResult = /*factory.createMethodReference*/
	      new UncollatedMethodCallReference
	      (((UncollatedReferenceQualifier)tmpResult).getReferencePrefix(),
	       ((UncollatedReferenceQualifier)tmpResult).getIdentifier(),
	       suffix.args);
              setPrefixInfo(tmpResult);
              setPostfixInfo(tmpResult);
	  } else {
	      throw new ParseException("Arguments without method name?");
	  }
          break;
      default:
          throw new ParseException("Unknown primary suffix type");
      }
    }
  )*
  {     
      if (tmpResult instanceof UncollatedReferenceQualifier) {
	  result = (UncollatedReferenceQualifier)tmpResult;
	  // should be a FieldReference?
      } else {
	  result = (Expression)tmpResult;
      }
      setPostfixInfo(result);
      return result;
  }
}

Literal PreDeclaredType():
{
	Literal result;
}
{
	( "bool" 
	| "byte"	
	| "char"	
	| "decimal"	
	| "double"	
	| "float"	
	| "int"	
	| "long"	
	| "object"	
	| "sbyte"	
	| "short"	
	| "string"	
	| "uint"	
	| "ulong"	
	| "ushort"
	)	
		{
			result = factory.createPreDefinedTypeLiteral(token.image);
			setPrefixInfo(result);
			setPostfixInfo(result);
			return result;
		}
}

PrimaryPrefixReturnValue PrimaryPrefix() :
{
    // reuses global prefix field
    Literal                      lit;
    Expression                   expr;
    TypeReference                tr;
    UncollatedReferenceQualifier qn;
    SuperReference               supRef = null;
    ParenthesizedExpression      parExpr = null;
    Identifier                   id = null;
}
{
(
  lit = Literal()
  {
      prefix.type    = prefix.LITERAL;
      prefix.literal = lit;
  }
|
  lit = PreDeclaredType()
  {
      prefix.type = prefix.LITERAL;
      prefix.literal = lit;
      
  }
|
  "this" 
  {
      prefix.type = prefix.THIS;
  }
|
  "base" {
      prefix.type = prefix.SUPER_REFERENCE;
      
   }
  [ LOOKAHEAD(3) ( "." CSIdentifier() 
  {
  	  prefix.type = prefix.SUPER_MEMBER;
      supRef = factory.createSuperReference();
      setPrefixInfo(supRef);
      setPostfixInfo(supRef);
      id   = factory.createIdentifier(token.image);
      setPrefixInfo(id);
      setPostfixInfo(id);
      prefix.name =
  	    factory.createUncollatedReferenceQualifier(supRef, id);
  }
  )
  ]
|
  "("
  { parExpr = factory.createParenthesizedExpression();
    setPrefixInfo(parExpr);
  }
  expr = Expression()
  ")"
  {
      setPostfixInfo(parExpr);
      parExpr.setArguments(new ExpressionArrayList(expr));
      prefix.expr = parExpr;
      prefix.type = prefix.PARENTHESIZED_EXPR;
  }
|
  expr = AllocationExpression()
  {
      prefix.type = prefix.ALLOCATION_EXPR;
      prefix.expr = expr;
  }

// .class is not allowed in C#
// .class is replaced by the typeof operator
|
  expr = TypeofExpression()
  {
      prefix.type = prefix.CLASS_REF;
  }
  
/*|
  LOOKAHEAD( ResultType() "." "class" )
  tr = ResultType() "." "class"
  {
      prefix.type    = prefix.CLASS_REF;
      prefix.typeref = tr;
  }
*/
|
  qn = Name()
  {
      prefix.type = prefix.QUALIFIED_NAME;
      prefix.name = qn;
  }
//| 
//	DefaultValueExpression()

  
)
  {
      return prefix;
  }
}

PrimarySuffixReturnValue PrimarySuffix() :
{
    // reuses global suffix field
    Expression               expr;
    ExpressionMutableList    args;
    Identifier               id;
}
{
(
//Commented because the C# language apparently doesn't support 
//these constructs.
//|
//  LOOKAHEAD(2)
//  "." "this"
//  {
//      suffix.type = suffix.THIS;
//  }
//  LOOKAHEAD(2)
//  "." expr = AllocationExpression()
//  {
//      suffix.type = suffix.ALLOCATION_EXPR;
//      suffix.expr = expr;
//  }
//|
  "[" args = ExpressionList() "]"
  {
      suffix.type = suffix.INDEX_EXPR;
      suffix.args = args;
  }
|
  "." CSIdentifier()
  {
      suffix.type = suffix.IDENTIFIER;
      suffix.id   = factory.createIdentifier(token.image);
      setPrefixInfo(suffix.id);
      setPostfixInfo(suffix.id);
  }
|
  args = Arguments()
  {
      suffix.type = suffix.ARGUMENTS;
      suffix.args = args;
  }
)
  {
      return suffix;
  }
}

Literal Literal() :
{
    Literal result;
}
{
(
  <INTEGER_LITERAL>
  {
      if (token.image.endsWith("L") || token.image.endsWith("l")) {
	  result = factory.createLongLiteral(token.image);
      } else {
	  result = factory.createIntLiteral(token.image);
      }
      setPrefixInfo(result);
  }
| <FLOATING_POINT_LITERAL>
  {
      if (token.image.endsWith("F") || token.image.endsWith("f")) {
	  result = factory.createFloatLiteral(token.image);
      } else {
	  result = factory.createDoubleLiteral(token.image);
      }
      setPrefixInfo(result);
  }
| <CHARACTER_LITERAL>
  {
      result = factory.createCharLiteral(token.image);
      setPrefixInfo(result);
  }
| <STRING_LITERAL>
  {
      result = factory.createStringLiteral(token.image);
      setPrefixInfo(result);
  }
| <VERBATIM_STRING_LITERAL>
	{
	  result = factory.createVerbatimStringLiteral(token.image);
	}  
| result = BooleanLiteral()
| result = NullLiteral()
)
  { 
    setPostfixInfo(result);
    return result;
  }

}

BooleanLiteral BooleanLiteral() :
{
    BooleanLiteral result;
}
{
(
  "true" { result = factory.createBooleanLiteral(true); }
|
  "false" { result = factory.createBooleanLiteral(false); }
)
  { 
    setPrefixInfo(result);
    setPostfixInfo(result);
    return result;
  }
}

NullLiteral NullLiteral() :
{
    NullLiteral result;
}
{
  "null"
  {
      result = factory.createNullLiteral();
      setPrefixInfo(result);
      return result;
  }
}

ExpressionMutableList Arguments() :
{
    ExpressionMutableList result = null;
}
{
  "(" [ result = ArgumentList() ] ")"
  {
      // !!! should set end coordinates to parent, possibly
      return result;
  }
}

ExpressionMutableList ArgumentList() :
{
    ExpressionMutableList result = new ExpressionArrayList();
    Expression expr;
}
{
        expr = Argument() { result.add(expr); }
  ( "," expr = Argument() { result.add(expr); } )*
  {
    return result;
  }
}

Expression Argument() :
{
    Expression result = null;
    Expression expr = null;
}
{
    (
      (	"ref" expr = Expression() 
      		  {
					result = factory.createRefOperator(expr);
					setPrefixInfo(result);
					setPostfixInfo(result);
              }  
      )
      |
      (	"out" expr = Expression() 
      		  {
					result = factory.createOutOperator(expr);                        
					setPrefixInfo(result);
					setPostfixInfo(result);
              }  
      )
      |
      result = Expression()
    
    )
    { 
    return result; }
}

TypeOperator AllocationExpression() :
{
    TypeOperator  result;
    TypeReference tr;
    ExpressionMutableList args;
    NewArray na;
}
{
(

  // First, there is a common part, which is "new NonArrayType"
  // In C# an expression like "new int(3)" seems also to be legal. (Whoa.)
  

  "new" 
  tr = NonArrayType()

  // After this, there is a possible solution of "(arguments)" and "
  
  (
    // This is the case of a normal constuctor
    (
   		args = Arguments()
			{
			    result = factory.createNew();
			    setPrefixInfo(result);
	 			result.setTypeReference(tr);
	 			((New)result).setArguments(args);
   			}
      
    )
    
    |
          
    // This is the case of an array creation with an array dimension and initializer
    (

		na = NewArray() 
		    {
		    	result = na;
    			result.setTypeReference(tr);
			}
		
    )
  
  )
)
{
    setPostfixInfo(result);
    return result;
}
}

NewArray NewArray() :
{
    int[] dimensions = null;
    NewArray result = factory.createNewArray();
    ExpressionMutableList sizes = null;
    ArrayInitializer init = null;
}
{

  { setPrefixInfo(result); }

(
  LOOKAHEAD ( "[" ( "]" | "," ) )  // This lookahead enforces the existence of at least 1
  								   // rank specifier (RankSpecifiers would allow none, but
  								   // this case will not be taken, if there is none)
  (
    dimensions = RankSpecifiers(null)
    init = ArrayInitializer()
   
  )
 |

  (
  
    "[" sizes = ExpressionList()  "]" { dimensions = new int[1]; dimensions[0] = sizes.size(); }
    dimensions = RankSpecifiers(dimensions)
    [ init = ArrayInitializer() ]    
    
  )
)

  {
      result.setDimensions(dimensions);
      if (sizes != null) {
    	  result.setArguments(sizes);
      }
      result.setArrayInitializer(init);
      setPostfixInfo(result);
      return result;
  }

}


/** Searches for rank specifiers, and delivers the dimensions in an array.
  * @param dimensions - an existing dimensions array (if any), or null, if
  *                     there was no such call yet.
  */

int[] RankSpecifiers(int[] dim) :
{
  int [] dimensions = dim;
  int dimCount = 0, tmpDim;
}
{

  {
    if (dimensions != null) dimCount = dimensions.length;
  }
  
  ( LOOKAHEAD(2)
  
    "[" {
  			tmpDim = 1;
  		}
  
       (
         ","
         {
       	  tmpDim++;
         }
  	   )*      
  
    "]" {  
      int [] newDimensions = new int [dimCount + 1];
      if (dimCount > 0) System.arraycopy(dimensions, 0, newDimensions, 0, dimCount);
      newDimensions[dimCount] = tmpDim;
      dimensions = newDimensions;
      dimCount++; 
      } 
  
  )*
  
  {
    if (dimensions == null) dimensions = new int[0];
    return dimensions;
  }
  
}


ExpressionMutableList ExpressionList() :
{
  ExpressionMutableList result = new ExpressionArrayList();
  Expression expr;
}
{
  expr = Expression() {
    result.add(expr);
  } 
  (
   "," expr = Expression() {
     result.add(expr);
   }
  )*

  {
    return result;
  }
}

//////////////////////////////////////////////////////////////////////
/////////////////////////////// Attributes ///////////////////////////
//////////////////////////////////////////////////////////////////////

AttributeSection GlobalAttributeSection(): 
{
	AttributeTarget target;
	AttributeSection result;
	AttributeMutableList attributeList = new AttributeArrayList();
	Attribute attr;
}
{
	"["
		{
				result = factory.createAttributeSection();
				setPrefixInfo(result);
		}
	 "assembly" 
			{
				target = factory.createAssemblyTarget(); 
				setPrefixInfo(target);
				setPostfixInfo(target);
				result.setTarget(target);
			}
	
	":" 
	(attr = Attribute()
		{
			if (attr != null) {
				attributeList.add(attr); 
			}
		}
	)
	("," attr = Attribute()
		{
			if (attr != null) {
				attributeList.add(attr); 
			}
		}
	)*
	"]"
	 	{
	 		result.setAttributes(attributeList);
	 		setPostfixInfo(result);	
	 	}
	 {
	 	return result;
	 }
}

AttributeSection AttributeSection(): 
{
	AttributeTarget target;
	AttributeSection result;
	AttributeMutableList attributeList = new AttributeArrayList();
	Attribute attr;
}
{
	"["
		{
				result = factory.createAttributeSection();
				setPrefixInfo(result);
		}
  [LOOKAHEAD(2)
	 (
	 "field" 
			{
				target = factory.createFieldTarget(); 
				setPrefixInfo(target);
				setPostfixInfo(target);
				result.setTarget(target);
			}
	 | 
	 "event" 
			{
				target = factory.createEventTarget(); 
				setPrefixInfo(target);
				setPostfixInfo(target);
				result.setTarget(target);
			}	  
	 		
	 | 
	 "method" 
			{
				target = factory.createMethodTarget(); 
				setPrefixInfo(target);
				setPostfixInfo(target);
				result.setTarget(target);
			}	  
	 		
	 | 
	 "module" 
			{
				target = factory.createModuleTarget(); 
				setPrefixInfo(target);
				setPostfixInfo(target);
				result.setTarget(target);
			}	  
	 		
	 | 
	 "param" 
			{
				target = factory.createParamTarget(); 
				setPrefixInfo(target);
				setPostfixInfo(target);
				result.setTarget(target);
			}	  
	 		
	 | 
	 "property" 
			{
				target = factory.createPropertyTarget(); 
				setPrefixInfo(target);
				setPostfixInfo(target);
				result.setTarget(target);
			}	  
	 		
	 | 
	 "return" 
			{
				target = factory.createReturnTarget(); 
				setPrefixInfo(target);
				setPostfixInfo(target);
				result.setTarget(target);
			}	  
	 		
	 | 
	 "type" 
			{
				target = factory.createTypeTarget(); 
				setPrefixInfo(target);
				setPostfixInfo(target);
				result.setTarget(target);
			}	  
	 )		
	
	":" 
  ]
	
	(attr = Attribute()
		{
			if (attr != null) {
				attributeList.add(attr); 
			}
		}
	)
	("," attr = Attribute()
		{
			if (attr != null) {
				attributeList.add(attr); 
			}
		}
	)*
	"]"
	 	{
	 		result.setAttributes(attributeList);
	 		setPostfixInfo(result);	
	 	}
	 {
	 	return result;
	 }
}






Attribute Attribute() :
{
	Attribute result = null;
	UncollatedReferenceQualifier name;
	AttributeArgumentMutableList argList = null;
}
{
	name = Name()
	{
		result = factory.createAttribute();
		setPrefixInfo(result);
		if (name != null) {
			result.setTypeReference(name.toTypeReference());
		}
	}
	["(" argList = AttributeArgumentList() ")"
	{
		result.setArguments(argList);
	}
	]
	
	{
		return result;
	}
}

AttributeArgumentMutableList AttributeArgumentList() : 
{
	AttributeArgumentMutableList result = new AttributeArgumentArrayList();
	AttributeArgument arg = null;
	Expression expr;
	Identifier id = null;
}
{
	[
	([LOOKAHEAD(2) CSIdentifier() 
	 {
	 	id = factory.createIdentifier(token.image);
	 	setPrefixInfo(id);
	 	setPostfixInfo(id);	
	 }
	 "="
	 ] 
	 expr = Expression()
	 	{
	 		if (id != null) {
	 			arg = factory.createNamedAttributeArgument(id,expr);
	 			id = null;
	 		} else {
	 			arg = factory.createAttributeArgument(expr);
	 		}
	 		setPrefixInfo(arg);
	 		setPostfixInfo(arg);
	 		result.add(arg);
	 	}
	 
	 )
	("," [LOOKAHEAD(2) 	CSIdentifier() 
	 {
	 	id = factory.createIdentifier(token.image);
	 	setPrefixInfo(id);
	 	setPostfixInfo(id);	
	 }
		"=" 
		] 
		expr = Expression()
	 	{
	 		if (id != null) {
	 			arg = factory.createNamedAttributeArgument(id,expr);
	 			id = null;
	 		} else {
	 			arg = factory.createAttributeArgument(expr);
	 		}
	 		setPrefixInfo(arg);
	 		setPostfixInfo(arg);
	 		result.add(arg);
	 	}
	 	)*
	]
	{
		return result;
	}
}

AttributeSectionMutableList AttributeSections() :
{
  AttributeSectionMutableList asl = new AttributeSectionArrayList();
  AttributeSection as;
}
{
(
  	as = AttributeSection() 
   	{
  		if (as != null) {
   			asl.add(as);
   		}
   	} 
)*
    {
       return asl;
    }  
}


/**
   For partial parsing ONLY. Allows this()/super() calls, as in
   constructor bodies.
 */
StatementMutableList GeneralizedStatements() :
{
    StatementMutableList            result = new StatementArrayList();
    Statement                       stat = null;
}
{
    ( stat = BlockStatement()
      { result.add(stat); }
    )*
  {
      return result;
  }
}

//
// ADDITION!
// all the generics stuff
//

/*******************/
/* A.2.13 Generics */
/*******************/

void TypeParameterList():
{}
{
  "<" TypeParameters() ">"
}

void TypeParameters():
{}
{
  (LOOKAHEAD(2) (AttributeSection())? TypeParameter() ",")* (AttributeSection())? TypeParameter()
}

void TypeParameter():
{}
{
  <IDENTIFIER>
}

void TypeArgumentList():
{}
{
  "<" TypeArguments() ">"
}

void TypeArguments():
{}
{
  (LOOKAHEAD(2) TypeArgument() ",")* TypeArgument()
}

void TypeArgument():
{}
{
  Type()
}

void TypeParameterConstraintsClauses():
{}
{
  (TypeParameterConstraintsClause())+
}

void TypeParameterConstraintsClause():
{}
{
  "where" TypeParameter() ":" TypeParameterConstraints()
}

void TypeParameterConstraints():
{}
{
  LOOKAHEAD(3) PrimaryConstraint() |
  LOOKAHEAD(3) SecondaryConstraints() |
  LOOKAHEAD(3) ConstructorConstraint() |
  LOOKAHEAD(3) PrimaryConstraint() "," SecondaryConstraints() |
  LOOKAHEAD(3) PrimaryConstraint() "," ConstructorConstraint() |
  LOOKAHEAD(3) SecondaryConstraints() "," ConstructorConstraint() |
  PrimaryConstraint() "," SecondaryConstraints() "," ConstructorConstraint()
}

void PrimaryConstraint():
{}
{
  ClassDeclaration() |
  // should already be in ClassDecleration
  //"class" |
  "struct" 
}

void SecondaryConstraints():
{}
{
  (LOOKAHEAD(2) (LOOKAHEAD(2) InterfaceDeclaration() | TypeParameter()) ",")* 
    (LOOKAHEAD(2) InterfaceDeclaration() | TypeParameter())
}

void ConstructorConstraint():
{}
{
  "new" "(" ")"
}

/*******************/
/* default value expression  */
/*******************/
void DefaultValueExpression():
{}
{
  "default" "(" Type() ")"
}

/*******************/
/* yield statement1  */
/*******************/
void YieldStatement():
{}
{
  LOOKAHEAD(2) "yield" "return" Expression() ";" |
  "yield" "break"
}
