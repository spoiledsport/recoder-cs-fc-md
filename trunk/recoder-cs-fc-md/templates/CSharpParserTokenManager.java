/* Generated By:JavaCC: Do not edit this line. CSharpParserTokenManager.java */
package recoder.parser;
import java.io.*;
import java.util.*;
import recoder.*;
import recoder.list.*;
import recoder.csharp.*;
import recoder.csharp.attributes.*;
import recoder.csharp.attributes.targets.*;
import recoder.csharp.declaration.*;
import recoder.csharp.declaration.modifier.*;
import recoder.csharp.expression.*;
import recoder.csharp.expression.literal.*;
import recoder.csharp.expression.operator.*;
import recoder.csharp.reference.*;
import recoder.csharp.statement.*;
import recoder.io.*;

/** Token Manager. */
public class CSharpParserTokenManager implements CSharpParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 13;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_4(0x8000L);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_4(0, active0);
}
static private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                     kind = 14;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x1000L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      default :
         return 2;
   }
   return 2;
}
private static final int jjStopStringLiteralDfa_6(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_6(int pos, long active0)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 47:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_6(0x410000L);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_6(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_6(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_6(0, active0);
}
static private int jjMoveStringLiteralDfa2_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(2, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_6(1, active0);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
static private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 47:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_5(0x90000L);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_5(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_5(0, active0);
}
static private int jjMoveStringLiteralDfa2_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(2, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_5(1, active0);
}
static private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     kind = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 17)
                     kind = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x800L) != 0L)
            return 12;
         if ((active1 & 0x200000000000000L) != 0L)
            return 36;
         if ((active0 & 0x340L) != 0L || (active2 & 0x10040000000L) != 0L)
            return 2;
         if ((active0 & 0xffffffffff000000L) != 0L || (active1 & 0x3ffffffffffffL) != 0L)
         {
            jjmatchedKind = 128;
            return 37;
         }
         return -1;
      case 1:
         if ((active0 & 0x100L) != 0L)
            return 0;
         if ((active0 & 0x1f40030002000000L) != 0L || (active1 & 0x80000000000L) != 0L)
            return 37;
         if ((active0 & 0xe0bffcfffd000000L) != 0L || (active1 & 0x3f7ffffffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 1;
            }
            return 37;
         }
         return -1;
      case 2:
         if ((active0 & 0xe0a7fefffd000000L) != 0L || (active1 & 0x3fc7ffbffefeeL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 2;
            }
            return 37;
         }
         if ((active0 & 0xe18000000000000L) != 0L || (active1 & 0x38004001011L) != 0L)
            return 37;
         return -1;
      case 3:
         if ((active0 & 0x8c97f2fe91000000L) != 0L || (active1 & 0x1fc77e17fefecL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 3;
            }
            return 37;
         }
         if ((active0 & 0x60200c016c000000L) != 0L || (active1 & 0x200081a800002L) != 0L)
            return 37;
         return -1;
      case 4:
         if ((active0 & 0x6900c90000000L) != 0L || (active1 & 0x906221014040L) != 0L)
            return 37;
         if ((active0 & 0x8c9162f201000000L) != 0L || (active1 & 0x16c15c87eafacL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 128;
               jjmatchedPos = 4;
            }
            return 37;
         }
         return -1;
      case 5:
         if ((active0 & 0x420000000000L) != 0L || (active1 & 0x6401887aa444L) != 0L)
            return 37;
         if ((active0 & 0x8c9120f201000000L) != 0L || (active1 & 0x1081440040ba8L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 5;
            return 37;
         }
         return -1;
      case 6:
         if ((active0 & 0x8c80209001000000L) != 0L || (active1 & 0x1081040040a28L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 6;
            return 37;
         }
         if ((active0 & 0x11006200000000L) != 0L || (active1 & 0x400000180L) != 0L)
            return 37;
         return -1;
      case 7:
         if ((active0 & 0x8400000000000000L) != 0L || (active1 & 0x40040200L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 7;
            return 37;
         }
         if ((active0 & 0x880209001000000L) != 0L || (active1 & 0x1081000000828L) != 0L)
            return 37;
         return -1;
      case 8:
         if ((active0 & 0x8400000000000000L) != 0L || (active1 & 0x40000200L) != 0L)
            return 37;
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 128;
            jjmatchedPos = 8;
            return 37;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 143;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000L);
      case 37:
         jjmatchedKind = 162;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000000L);
      case 38:
         jjmatchedKind = 159;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20001000000L);
      case 40:
         return jjStopAtPos(0, 131);
      case 41:
         return jjStopAtPos(0, 132);
      case 42:
         jjmatchedKind = 157;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000L);
      case 43:
         jjmatchedKind = 155;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2002000000L);
      case 44:
         return jjStopAtPos(0, 138);
      case 45:
         jjmatchedKind = 156;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x804004000000L);
      case 46:
         return jjStartNfaWithStates_0(0, 139, 12);
      case 47:
         jjmatchedKind = 158;
         return jjMoveStringLiteralDfa1_0(0x340L, 0x0L, 0x10000000000L);
      case 58:
         return jjStopAtPos(0, 146);
      case 59:
         return jjStopAtPos(0, 137);
      case 60:
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200800100000L);
      case 61:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000L);
      case 62:
         jjmatchedKind = 141;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x401000200000L);
      case 63:
         return jjStopAtPos(0, 145);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 135);
      case 93:
         return jjStopAtPos(0, 136);
      case 94:
         jjmatchedKind = 161;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3000000L, 0xa0000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x3c000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1fc0000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3e000000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x7c0000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1f800000000000L, 0x100000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x8000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1fc0000000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x0L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x3L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3cL, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18000000007c0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000003800L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100007fc000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000f800000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3f0000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c00000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 133);
      case 124:
         jjmatchedKind = 160;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000800000L);
      case 125:
         return jjStopAtPos(0, 134);
      case 126:
         return jjStopAtPos(0, 144);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      case 38:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         break;
      case 42:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 0);
         break;
      case 43:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         break;
      case 45:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L, active2, 0L);
      case 60:
         if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x200000000000L);
      case 61:
         if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(1, 147);
         else if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         else if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 165);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 166);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 168);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 169);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 170);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 171);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 172);
         break;
      case 62:
         if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 175);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x400000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80008000c4000000L, active1, 0x8000000000c0L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0x4004L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xe000000000L, active1, 0x25800000b801L, active2, 0L);
      case 102:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 54, 37);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000L, active1, 0x6001810000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000000L, active1, 0x100410020000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4040400000000L, active1, 0x20000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xe00080000000000L, active1, 0xc0000000L, active2, 0L);
      case 111:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6038021808000000L, active1, 0x401800000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0x1000006000300L, active2, 0L);
      case 115:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 60, 37);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80300000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3c0000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x412L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x20L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0x2000008000000L, active2, 0L);
      case 124:
         if ((active2 & 0x800000L) != 0L)
            return jjStopAtPos(1, 151);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(2, 9);
         break;
      case 61:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStopAtPos(2, 173);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 174);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x500000000L, active1, 0xc8800L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000002000000000L, active1, 0x40000000L, active2, 0L);
      case 100:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 105, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100210000000L, active1, 0x102000000028L, active2, 0L);
      case 102:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4a00c00100L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x808000000000L, active1, 0x1000000002L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x40000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4001001800000000L, active1, 0x10000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000008000000L, active1, 0x1000020010200L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80200000000000L, active1, 0x2000008000000L, active2, 0L);
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0x8004013000c0L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40045000000L, active1, 0x80080000000L, active2, 0L);
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 37);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 103, 37);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 104, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0xc204000a0000000L, active1, 0x200000002000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0000000000L, active1, 0x2000000L, active2, 0L);
      case 119:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 37);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 90, 37);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x5004010000000L, active1, 0x801080000040L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x280000000L, active1, 0x40000L);
      case 100:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 37);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 37);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 37);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 37);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 37);
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8c12408000000000L, active1, 0x80008020004L);
      case 103:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 37);
         break;
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200040000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0x100000L);
      case 107:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 37);
         break;
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 37);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x80200000000000L, active1, 0x104000008400L);
      case 109:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 37);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0x220000000L);
      case 111:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40101000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000010028L);
      case 115:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 87, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x800c00000000L, active1, 0L);
      case 116:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 37);
         return jjMoveStringLiteralDfa4_0(active0, 0x1001000000L, active1, 0x400484280L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000202000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x108L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x600004L);
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 37);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 37);
         break;
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 37);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 37);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 37);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000040008200L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L);
      case 103:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 93, 37);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 37);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80201000000000L, active1, 0x80480L);
      case 107:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L, active1, 0x40000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1020000000000L, active1, 0x400000000000L);
      case 109:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0x80000000040L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200008020800L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00400001000000L, active1, 0x100002020L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 37);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 37);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 37);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 37);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0x400000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000L);
      case 119:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 88, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0xa001000000L, active1, 0x400040080L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000L);
      case 99:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 37);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 37);
         return jjMoveStringLiteralDfa6_0(active0, 0x90200000000000L, active1, 0x40000200L);
      case 100:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 37);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 109, 37);
         break;
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 37);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 37);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 37);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 110, 37);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0L);
      case 102:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 37);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 37);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 37);
         break;
      case 104:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 37);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000020L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1004000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 37);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 37);
         return jjMoveStringLiteralDfa6_0(active0, 0x800001000000000L, active1, 0x800L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000L);
      case 115:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 37);
         break;
      case 116:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 37);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 37);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 37);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x108L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8c00000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L, active1, 0L);
      case 100:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 37);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L);
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 37);
         break;
      case 104:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 37);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80200000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000L);
      case 108:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 37);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 37);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 98, 37);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x81000040800L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 37);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0x1000000000200L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x8400000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 36, 37);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 39, 37);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 37);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 100, 37);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000200L);
      case 108:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 37);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000L);
      case 114:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 37);
         break;
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 37);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 45, 37);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 37);
         break;
      case 121:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 75, 37);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 107, 37);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 112, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 73, 37);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 94, 37);
         break;
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 58, 37);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 63, 37);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(9, 82, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 56;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 114)
                        kind = 114;
                     jjCheckNAddStates(0, 9);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 128)
                        kind = 128;
                     jjCheckNAdd(37);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  else if (curChar == 39)
                     jjAddStates(13, 14);
                  else if (curChar == 46)
                     jjCheckNAdd(12);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjAddStates(15, 17);
                  break;
               case 11:
                  if (curChar == 46)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddStates(18, 20);
                  break;
               case 14:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if (curChar == 39)
                     jjAddStates(13, 14);
                  break;
               case 18:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if (curChar == 39 && kind > 119)
                     kind = 119;
                  break;
               case 21:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 19);
                  break;
               case 23:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 24:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 12);
                  break;
               case 27:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 29:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 30:
                  if (curChar == 34 && kind > 120)
                     kind = 120;
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 24);
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 33:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 36:
                  if (curChar != 36)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAddStates(0, 9);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAddStates(25, 27);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 46)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddStates(28, 30);
                  break;
               case 46:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(47, 16);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 117)
                     kind = 117;
                  jjCheckNAddTwoStates(51, 16);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(31, 33);
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 16);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 128)
                        kind = 128;
                     jjCheckNAdd(37);
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 1:
                  if (kind > 7)
                     kind = 7;
                  break;
               case 5:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAddStates(15, 17);
                  break;
               case 7:
               case 40:
                  if ((0x20000000200000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x100000001000L & l) != 0L && kind > 114)
                     kind = 114;
                  break;
               case 9:
               case 41:
                  if ((0x100000001000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x20000000200000L & l) != 0L && kind > 114)
                     kind = 114;
                  break;
               case 13:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(34, 35);
                  break;
               case 16:
                  if ((0x205000002050L & l) != 0L && kind > 117)
                     kind = 117;
                  break;
               case 18:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(36, 38);
                  break;
               case 21:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 27:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 28:
                  if (curChar == 92)
                     jjAddStates(39, 41);
                  break;
               case 29:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 35:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
               case 37:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(37);
                  break;
               case 45:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(44, 45);
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 36:
               case 37:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(37);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 7)
                     kind = 7;
                  break;
               case 18:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 27:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(10, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 56 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x800L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         return 2;
   }
   return 2;
}
static private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_8(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_8(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0, active1, active2), pos + 1);
}
static private int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 122);
      case 13:
         jjmatchedKind = 123;
         return jjMoveStringLiteralDfa1_8(0x1000000000000000L);
      case 34:
         jjmatchedKind = 127;
         return jjMoveStringLiteralDfa1_8(0x2000000000000000L);
      default :
         return jjMoveNfa_8(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_8(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(0, 0L, active1, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         break;
      case 34:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         break;
      default :
         break;
   }
   return jjStartNfa_8(0, 0L, active1, 0L);
}
static private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     kind = 126;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 126;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 126)
                     kind = 126;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_7()
{
   return jjMoveNfa_7(0, 0);
}
static private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 23)
                     kind = 23;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   39, 40, 41, 42, 43, 48, 49, 52, 53, 16, 27, 28, 30, 18, 20, 6, 
   7, 9, 12, 13, 16, 27, 28, 32, 30, 39, 40, 41, 44, 45, 16, 52, 
   53, 16, 14, 15, 21, 22, 24, 29, 31, 33, 46, 47, 50, 51, 54, 55, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\141\163", "\142\141\163\145", "\142\157\157\154", "\142\162\145\141\153", 
"\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", "\143\150\141\162", 
"\143\150\145\143\153\145\144", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\143\151\155\141\154", "\144\145\146\141\165\154\164", 
"\144\145\154\145\147\141\164\145", "\144\157", "\144\157\165\142\154\145", "\145\154\163\145", 
"\145\156\165\155", "\145\166\145\156\164", "\145\170\160\154\151\143\151\164", 
"\145\170\164\145\162\156", "\146\141\154\163\145", "\146\151\156\141\154\154\171", 
"\146\151\170\145\144", "\146\154\157\141\164", "\146\157\162", "\146\157\162\145\141\143\150", 
"\147\157\164\157", "\151\146", "\151\155\160\154\151\143\151\164", "\151\156", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\151\156\164\145\162\156\141\154", "\151\163", "\154\157\143\153", 
"\154\157\156\147", "\156\141\155\145\163\160\141\143\145", "\156\145\167", "\156\165\154\154", 
"\157\142\152\145\143\164", "\157\160\145\162\141\164\157\162", "\157\165\164", 
"\157\166\145\162\162\151\144\145", "\160\141\162\141\155\163", "\160\141\162\164\151\141\154", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\141\144\157\156\154\171", "\162\145\146", "\162\145\164\165\162\156", "\163\142\171\164\145", 
"\163\145\141\154\145\144", "\163\150\157\162\164", "\163\151\172\145\157\146", 
"\163\164\141\143\153\141\154\154\157\143", "\163\164\141\164\151\143", "\163\164\162\151\156\147", 
"\163\164\162\165\143\164", "\163\167\151\164\143\150", "\164\150\151\163", "\164\150\162\157\167", 
"\164\162\165\145", "\164\162\171", "\164\171\160\145\157\146", "\165\151\156\164", 
"\165\154\157\156\147", "\165\156\143\150\145\143\153\145\144", "\165\156\163\141\146\145", 
"\165\163\150\157\162\164", "\165\163\151\156\147", "\166\151\162\164\165\141\154", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\145\162\145", "\167\150\151\154\145", "\147\145\164", 
"\163\145\164", "\141\144\144", "\162\145\155\157\166\145", 
"\141\163\163\145\155\142\154\171", "\146\151\145\154\144", "\155\145\164\150\157\144", 
"\155\157\144\165\154\145", "\160\141\162\141\155", "\160\162\157\160\145\162\164\171", 
"\164\171\160\145", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", 
"\56", "\75", "\76", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", 
"\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", 
"\57", "\46", "\174", "\136", "\45", "\74\74", "\76\76", "\53\75", "\55\75", 
"\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\74\74\75", "\76\76\75", 
"\55\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
   "IN_CSHARP_DOCCOMMENT",
   "IN_CSHARP_DOCCOMMENT_ENDOFLINE_1",
   "IN_CSHARP_DOCCOMMENT_ENDOFLINE_2",
   "CSHARP_DOCCOMMENT_ENDOFLINE",
   "IN_VERBATIM_STRING_LITERAL",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 0, 0, 0, -1, 5, 6, 4, 7, 7, 7, 7, 7, 7, 0, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, 
   -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 
};
static final long[] jjtoToken = {
   0xffffffffff000001L, 0x81a7ffffffffffffL, 0xfffffffffff9L, 
};
static final long[] jjtoSkip = {
   0x801c3eL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x801c00L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x7fe3c0L, 0x7e00000000000000L, 0x0L, 
};
static protected JavaCharStream input_stream;
static private final int[] jjrounds = new int[56];
static private final int[] jjstateSet = new int[112];
private static final StringBuilder jjimage = new StringBuilder();
private static StringBuilder image = jjimage;
private static int jjimageLen;
private static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public CSharpParserTokenManager(JavaCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public CSharpParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 56; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 9 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 13)
         {
            jjmatchedKind = 13;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 13)
         {
            jjmatchedKind = 13;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 13)
         {
            jjmatchedKind = 13;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 13)
         {
            jjmatchedKind = 13;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 10 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      CSharpParser.addSingleLineComment(matchedToken);
         break;
      case 11 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      CSharpParser.addXmlDocComment(matchedToken);
         break;
      case 12 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      CSharpParser.addMultiLineComment(matchedToken);
         break;
      case 23 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                CSharpParser.addXmlDocComment(matchedToken);
         break;
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      case 17 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                input_stream.backup(2);
         break;
      case 18 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                input_stream.backup(2);
         break;
      case 19 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                input_stream.backup(3);
         break;
      case 20 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                input_stream.backup(3);
         break;
      case 21 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                input_stream.backup(3);
         break;
      case 22 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                input_stream.backup(4);
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
