/* Generated By:JavaCC: Do not edit this line. CSharpParserConstants.java */
package recoder.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CSharpParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 11;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 12;
  /** RegularExpression Id. */
  int CSHARP_DOCCOMMENT = 23;
  /** RegularExpression Id. */
  int ABSTRACT = 24;
  /** RegularExpression Id. */
  int AS = 25;
  /** RegularExpression Id. */
  int BASE = 26;
  /** RegularExpression Id. */
  int BOOL = 27;
  /** RegularExpression Id. */
  int BREAK = 28;
  /** RegularExpression Id. */
  int BYTE = 29;
  /** RegularExpression Id. */
  int CASE = 30;
  /** RegularExpression Id. */
  int CATCH = 31;
  /** RegularExpression Id. */
  int CHAR = 32;
  /** RegularExpression Id. */
  int CHECKED = 33;
  /** RegularExpression Id. */
  int CLASS = 34;
  /** RegularExpression Id. */
  int CONST = 35;
  /** RegularExpression Id. */
  int CONTINUE = 36;
  /** RegularExpression Id. */
  int DECIMAL = 37;
  /** RegularExpression Id. */
  int _DEFAULT = 38;
  /** RegularExpression Id. */
  int DELEGATE = 39;
  /** RegularExpression Id. */
  int DO = 40;
  /** RegularExpression Id. */
  int DOUBLE = 41;
  /** RegularExpression Id. */
  int ELSE = 42;
  /** RegularExpression Id. */
  int ENUM = 43;
  /** RegularExpression Id. */
  int EVENT = 44;
  /** RegularExpression Id. */
  int EXPLICIT = 45;
  /** RegularExpression Id. */
  int EXTERN = 46;
  /** RegularExpression Id. */
  int FALSE = 47;
  /** RegularExpression Id. */
  int FINALLY = 48;
  /** RegularExpression Id. */
  int FIXED = 49;
  /** RegularExpression Id. */
  int FLOAT = 50;
  /** RegularExpression Id. */
  int FOR = 51;
  /** RegularExpression Id. */
  int FOREACH = 52;
  /** RegularExpression Id. */
  int GOTO = 53;
  /** RegularExpression Id. */
  int IF = 54;
  /** RegularExpression Id. */
  int IMPLICIT = 55;
  /** RegularExpression Id. */
  int IN = 56;
  /** RegularExpression Id. */
  int INT = 57;
  /** RegularExpression Id. */
  int INTERFACE = 58;
  /** RegularExpression Id. */
  int INTERNAL = 59;
  /** RegularExpression Id. */
  int IS = 60;
  /** RegularExpression Id. */
  int LOCK = 61;
  /** RegularExpression Id. */
  int LONG = 62;
  /** RegularExpression Id. */
  int NAMESPACE = 63;
  /** RegularExpression Id. */
  int NEW = 64;
  /** RegularExpression Id. */
  int NULL = 65;
  /** RegularExpression Id. */
  int OBJECT = 66;
  /** RegularExpression Id. */
  int OPERATOR = 67;
  /** RegularExpression Id. */
  int OUT = 68;
  /** RegularExpression Id. */
  int OVERRIDE = 69;
  /** RegularExpression Id. */
  int PARAMS = 70;
  /** RegularExpression Id. */
  int PARTIAL = 71;
  /** RegularExpression Id. */
  int PRIVATE = 72;
  /** RegularExpression Id. */
  int PROTECTED = 73;
  /** RegularExpression Id. */
  int PUBLIC = 74;
  /** RegularExpression Id. */
  int READONLY = 75;
  /** RegularExpression Id. */
  int REF = 76;
  /** RegularExpression Id. */
  int RETURN = 77;
  /** RegularExpression Id. */
  int SBYTE = 78;
  /** RegularExpression Id. */
  int SEALED = 79;
  /** RegularExpression Id. */
  int SHORT = 80;
  /** RegularExpression Id. */
  int SIZEOF = 81;
  /** RegularExpression Id. */
  int STACKALLOC = 82;
  /** RegularExpression Id. */
  int STATIC = 83;
  /** RegularExpression Id. */
  int STRING = 84;
  /** RegularExpression Id. */
  int STRUCT = 85;
  /** RegularExpression Id. */
  int SWITCH = 86;
  /** RegularExpression Id. */
  int THIS = 87;
  /** RegularExpression Id. */
  int THROW = 88;
  /** RegularExpression Id. */
  int TRUE = 89;
  /** RegularExpression Id. */
  int TRY = 90;
  /** RegularExpression Id. */
  int TYPEOF = 91;
  /** RegularExpression Id. */
  int UINT = 92;
  /** RegularExpression Id. */
  int ULONG = 93;
  /** RegularExpression Id. */
  int UNCHECKED = 94;
  /** RegularExpression Id. */
  int UNSAFE = 95;
  /** RegularExpression Id. */
  int USHORT = 96;
  /** RegularExpression Id. */
  int USING = 97;
  /** RegularExpression Id. */
  int VIRTUAL = 98;
  /** RegularExpression Id. */
  int VOID = 99;
  /** RegularExpression Id. */
  int VOLATILE = 100;
  /** RegularExpression Id. */
  int WHERE = 101;
  /** RegularExpression Id. */
  int WHILE = 102;
  /** RegularExpression Id. */
  int YIELD = 103;
  /** RegularExpression Id. */
  int GET = 104;
  /** RegularExpression Id. */
  int SET = 105;
  /** RegularExpression Id. */
  int ADD = 106;
  /** RegularExpression Id. */
  int REMOVE = 107;
  /** RegularExpression Id. */
  int ASSEMBLY = 108;
  /** RegularExpression Id. */
  int FIELD = 109;
  /** RegularExpression Id. */
  int METHOD = 110;
  /** RegularExpression Id. */
  int MODULE = 111;
  /** RegularExpression Id. */
  int PARAM = 112;
  /** RegularExpression Id. */
  int PROPERTY = 113;
  /** RegularExpression Id. */
  int TYPE = 114;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 115;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 116;
  /** RegularExpression Id. */
  int HEX_LITERAL = 117;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 118;
  /** RegularExpression Id. */
  int EXPONENT = 119;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 120;
  /** RegularExpression Id. */
  int STRING_LITERAL = 121;
  /** RegularExpression Id. */
  int VERBATIM_STRING_LITERAL = 128;
  /** RegularExpression Id. */
  int IDENTIFIER = 129;
  /** RegularExpression Id. */
  int LETTER = 130;
  /** RegularExpression Id. */
  int DIGIT = 131;
  /** RegularExpression Id. */
  int LPAREN = 132;
  /** RegularExpression Id. */
  int RPAREN = 133;
  /** RegularExpression Id. */
  int LBRACE = 134;
  /** RegularExpression Id. */
  int RBRACE = 135;
  /** RegularExpression Id. */
  int LBRACKET = 136;
  /** RegularExpression Id. */
  int RBRACKET = 137;
  /** RegularExpression Id. */
  int SEMICOLON = 138;
  /** RegularExpression Id. */
  int COMMA = 139;
  /** RegularExpression Id. */
  int DOT = 140;
  /** RegularExpression Id. */
  int ASSIGN = 141;
  /** RegularExpression Id. */
  int GT = 142;
  /** RegularExpression Id. */
  int LT = 143;
  /** RegularExpression Id. */
  int BANG = 144;
  /** RegularExpression Id. */
  int TILDE = 145;
  /** RegularExpression Id. */
  int HOOK = 146;
  /** RegularExpression Id. */
  int COLON = 147;
  /** RegularExpression Id. */
  int EQ = 148;
  /** RegularExpression Id. */
  int LE = 149;
  /** RegularExpression Id. */
  int GE = 150;
  /** RegularExpression Id. */
  int NE = 151;
  /** RegularExpression Id. */
  int SC_OR = 152;
  /** RegularExpression Id. */
  int SC_AND = 153;
  /** RegularExpression Id. */
  int INCR = 154;
  /** RegularExpression Id. */
  int DECR = 155;
  /** RegularExpression Id. */
  int PLUS = 156;
  /** RegularExpression Id. */
  int MINUS = 157;
  /** RegularExpression Id. */
  int STAR = 158;
  /** RegularExpression Id. */
  int SLASH = 159;
  /** RegularExpression Id. */
  int BIT_AND = 160;
  /** RegularExpression Id. */
  int BIT_OR = 161;
  /** RegularExpression Id. */
  int XOR = 162;
  /** RegularExpression Id. */
  int REM = 163;
  /** RegularExpression Id. */
  int LSHIFT = 164;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 165;
  /** RegularExpression Id. */
  int PLUSASSIGN = 166;
  /** RegularExpression Id. */
  int MINUSASSIGN = 167;
  /** RegularExpression Id. */
  int STARASSIGN = 168;
  /** RegularExpression Id. */
  int SLASHASSIGN = 169;
  /** RegularExpression Id. */
  int ANDASSIGN = 170;
  /** RegularExpression Id. */
  int ORASSIGN = 171;
  /** RegularExpression Id. */
  int XORASSIGN = 172;
  /** RegularExpression Id. */
  int REMASSIGN = 173;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 174;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 175;
  /** RegularExpression Id. */
  int ARROW = 176;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;
  /** Lexical state. */
  int IN_CSHARP_DOCCOMMENT = 4;
  /** Lexical state. */
  int IN_CSHARP_DOCCOMMENT_ENDOFLINE_1 = 5;
  /** Lexical state. */
  int IN_CSHARP_DOCCOMMENT_ENDOFLINE_2 = 6;
  /** Lexical state. */
  int CSHARP_DOCCOMMENT_ENDOFLINE = 7;
  /** Lexical state. */
  int IN_VERBATIM_STRING_LITERAL = 8;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "<token of kind 7>",
    "\"/*\"",
    "\"///\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 13>",
    "<token of kind 14>",
    "\"\\r\\n\"",
    "\"///\"",
    "<token of kind 17>",
    "\"/\"",
    "\"//\"",
    "<token of kind 20>",
    "\"/\"",
    "\"//\"",
    "<CSHARP_DOCCOMMENT>",
    "\"abstract\"",
    "\"as\"",
    "\"base\"",
    "\"bool\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"checked\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"decimal\"",
    "\"default\"",
    "\"delegate\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"event\"",
    "\"explicit\"",
    "\"extern\"",
    "\"false\"",
    "\"finally\"",
    "\"fixed\"",
    "\"float\"",
    "\"for\"",
    "\"foreach\"",
    "\"goto\"",
    "\"if\"",
    "\"implicit\"",
    "\"in\"",
    "\"int\"",
    "\"interface\"",
    "\"internal\"",
    "\"is\"",
    "\"lock\"",
    "\"long\"",
    "\"namespace\"",
    "\"new\"",
    "\"null\"",
    "\"object\"",
    "\"operator\"",
    "\"out\"",
    "\"override\"",
    "\"params\"",
    "\"partial\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"readonly\"",
    "\"ref\"",
    "\"return\"",
    "\"sbyte\"",
    "\"sealed\"",
    "\"short\"",
    "\"sizeof\"",
    "\"stackalloc\"",
    "\"static\"",
    "\"string\"",
    "\"struct\"",
    "\"switch\"",
    "\"this\"",
    "\"throw\"",
    "\"true\"",
    "\"try\"",
    "\"typeof\"",
    "\"uint\"",
    "\"ulong\"",
    "\"unchecked\"",
    "\"unsafe\"",
    "\"ushort\"",
    "\"using\"",
    "\"virtual\"",
    "\"void\"",
    "\"volatile\"",
    "\"where\"",
    "\"while\"",
    "\"yield\"",
    "\"get\"",
    "\"set\"",
    "\"add\"",
    "\"remove\"",
    "\"assembly\"",
    "\"field\"",
    "\"method\"",
    "\"module\"",
    "\"param\"",
    "\"property\"",
    "\"type\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "\"@\\\"\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"\\\"\\\"\"",
    "<token of kind 127>",
    "\"\\\"\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"->\"",
  };

}
